/* tslint:disable */
/* eslint-disable */
/*
Svix API

Welcome to the Svix API documentation!

Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)

# Introduction

This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).

## Main concepts

In Svix you have four important entities you will be interacting with:

- `messages`: these are the webhooks being sent. They can have contents and a few other properties.
- `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform.
- `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type).
- `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.


## Authentication

Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`. For more information on authentication, please refer to the [authentication token docs](https://docs.svix.com/api-keys).




## Code samples

The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).


## Idempotency

Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.

To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.

Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result for a period of up to 12 hours.

Please note that idempotency is only supported for `POST` requests.


## Cross-Origin Resource Sharing

This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.


The version of the OpenAPI document: 1.21.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { HttpErrorOut } from '../models';
// @ts-ignore
import { IntegrationIn } from '../models';
// @ts-ignore
import { IntegrationKeyOut } from '../models';
// @ts-ignore
import { IntegrationOut } from '../models';
// @ts-ignore
import { IntegrationUpdate } from '../models';
// @ts-ignore
import { ListResponseIntegrationOut } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * IntegrationApi - axios parameter creator
 * @export
 */
export const IntegrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an integration.
         * @summary Create Integration
         * @param {string} appId The app\&#39;s ID or UID
         * @param {IntegrationIn} integrationIn 
         * @param {string} [idempotencyKey] The request\&#39;s idempotency key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewIntegration: async (appId: string, integrationIn: IntegrationIn, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('createNewIntegration', 'appId', appId)
            // verify required parameter 'integrationIn' is not null or undefined
            assertParamExists('createNewIntegration', 'integrationIn', integrationIn)
            const localVarPath = `/api/v1/app/{app_id}/integration`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['idempotency-key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: integrationIn,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/integration',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(integrationIn, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an integration.
         * @summary Delete Integration
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} integId The integ\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (appId: string, integId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('deleteById', 'appId', appId)
            // verify required parameter 'integId' is not null or undefined
            assertParamExists('deleteById', 'integId', integId)
            const localVarPath = `/api/v1/app/{app_id}/integration/{integ_id}`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"integ_id"}}`, encodeURIComponent(String(integId !== undefined ? integId : `-integ_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/integration/{integ_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an integration.
         * @summary Get Integration
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} integId The integ\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (appId: string, integId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('getById', 'appId', appId)
            // verify required parameter 'integId' is not null or undefined
            assertParamExists('getById', 'integId', integId)
            const localVarPath = `/api/v1/app/{app_id}/integration/{integ_id}`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"integ_id"}}`, encodeURIComponent(String(integId !== undefined ? integId : `-integ_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/integration/{integ_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an integration\'s key.
         * @summary Get Integration Key
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} integId The integ\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKey: async (appId: string, integId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('getKey', 'appId', appId)
            // verify required parameter 'integId' is not null or undefined
            assertParamExists('getKey', 'integId', integId)
            const localVarPath = `/api/v1/app/{app_id}/integration/{integ_id}/key`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"integ_id"}}`, encodeURIComponent(String(integId !== undefined ? integId : `-integ_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/integration/{integ_id}/key',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the application\'s integrations.
         * @summary List Integrations
         * @param {string} appId The app\&#39;s ID or UID
         * @param {number} [limit] Limit the number of returned items
         * @param {string} [iterator] The iterator returned from a prior invocation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (appId: string, limit?: number, iterator?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('list', 'appId', appId)
            const localVarPath = `/api/v1/app/{app_id}/integration`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (iterator !== undefined) {
                localVarQueryParameter['iterator'] = iterator;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/integration',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Rotate the integration\'s key. The previous key will be immediately revoked.
         * @summary Rotate Integration Key
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} integId The integ\&#39;s ID
         * @param {string} [idempotencyKey] The request\&#39;s idempotency key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rotateKey: async (appId: string, integId: string, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('rotateKey', 'appId', appId)
            // verify required parameter 'integId' is not null or undefined
            assertParamExists('rotateKey', 'integId', integId)
            const localVarPath = `/api/v1/app/{app_id}/integration/{integ_id}/key/rotate`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"integ_id"}}`, encodeURIComponent(String(integId !== undefined ? integId : `-integ_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['idempotency-key'] = String(idempotencyKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/integration/{integ_id}/key/rotate',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an integration.
         * @summary Update Integration
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} integId The integ\&#39;s ID
         * @param {IntegrationUpdate} integrationUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationById: async (appId: string, integId: string, integrationUpdate: IntegrationUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('updateIntegrationById', 'appId', appId)
            // verify required parameter 'integId' is not null or undefined
            assertParamExists('updateIntegrationById', 'integId', integId)
            // verify required parameter 'integrationUpdate' is not null or undefined
            assertParamExists('updateIntegrationById', 'integrationUpdate', integrationUpdate)
            const localVarPath = `/api/v1/app/{app_id}/integration/{integ_id}`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"integ_id"}}`, encodeURIComponent(String(integId !== undefined ? integId : `-integ_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: integrationUpdate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/integration/{integ_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(integrationUpdate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IntegrationApi - functional programming interface
 * @export
 */
export const IntegrationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IntegrationApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an integration.
         * @summary Create Integration
         * @param {IntegrationApiCreateNewIntegrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewIntegration(requestParameters: IntegrationApiCreateNewIntegrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationOut>> {
            const integrationIn: IntegrationIn = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewIntegration(requestParameters.appId, integrationIn, requestParameters.idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an integration.
         * @summary Delete Integration
         * @param {IntegrationApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: IntegrationApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.appId, requestParameters.integId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an integration.
         * @summary Get Integration
         * @param {IntegrationApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: IntegrationApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.appId, requestParameters.integId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an integration\'s key.
         * @summary Get Integration Key
         * @param {IntegrationApiGetKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKey(requestParameters: IntegrationApiGetKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationKeyOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKey(requestParameters.appId, requestParameters.integId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the application\'s integrations.
         * @summary List Integrations
         * @param {IntegrationApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: IntegrationApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseIntegrationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.appId, requestParameters.limit, requestParameters.iterator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Rotate the integration\'s key. The previous key will be immediately revoked.
         * @summary Rotate Integration Key
         * @param {IntegrationApiRotateKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rotateKey(requestParameters: IntegrationApiRotateKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationKeyOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rotateKey(requestParameters.appId, requestParameters.integId, requestParameters.idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an integration.
         * @summary Update Integration
         * @param {IntegrationApiUpdateIntegrationByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIntegrationById(requestParameters: IntegrationApiUpdateIntegrationByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationOut>> {
            const integrationUpdate: IntegrationUpdate = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIntegrationById(requestParameters.appId, requestParameters.integId, integrationUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IntegrationApi - factory interface
 * @export
 */
export const IntegrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IntegrationApiFp(configuration)
    return {
        /**
         * Create an integration.
         * @summary Create Integration
         * @param {IntegrationApiCreateNewIntegrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewIntegration(requestParameters: IntegrationApiCreateNewIntegrationRequest, options?: AxiosRequestConfig): AxiosPromise<IntegrationOut> {
            return localVarFp.createNewIntegration(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an integration.
         * @summary Delete Integration
         * @param {IntegrationApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: IntegrationApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an integration.
         * @summary Get Integration
         * @param {IntegrationApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: IntegrationApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<IntegrationOut> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an integration\'s key.
         * @summary Get Integration Key
         * @param {IntegrationApiGetKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKey(requestParameters: IntegrationApiGetKeyRequest, options?: AxiosRequestConfig): AxiosPromise<IntegrationKeyOut> {
            return localVarFp.getKey(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the application\'s integrations.
         * @summary List Integrations
         * @param {IntegrationApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: IntegrationApiListRequest, options?: AxiosRequestConfig): AxiosPromise<ListResponseIntegrationOut> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Rotate the integration\'s key. The previous key will be immediately revoked.
         * @summary Rotate Integration Key
         * @param {IntegrationApiRotateKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rotateKey(requestParameters: IntegrationApiRotateKeyRequest, options?: AxiosRequestConfig): AxiosPromise<IntegrationKeyOut> {
            return localVarFp.rotateKey(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an integration.
         * @summary Update Integration
         * @param {IntegrationApiUpdateIntegrationByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegrationById(requestParameters: IntegrationApiUpdateIntegrationByIdRequest, options?: AxiosRequestConfig): AxiosPromise<IntegrationOut> {
            return localVarFp.updateIntegrationById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewIntegration operation in IntegrationApi.
 * @export
 * @interface IntegrationApiCreateNewIntegrationRequest
 */
export type IntegrationApiCreateNewIntegrationRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof IntegrationApiCreateNewIntegration
    */
    readonly appId: string
    
    /**
    * The request\'s idempotency key
    * @type {string}
    * @memberof IntegrationApiCreateNewIntegration
    */
    readonly idempotencyKey?: string
    
} & IntegrationIn

/**
 * Request parameters for deleteById operation in IntegrationApi.
 * @export
 * @interface IntegrationApiDeleteByIdRequest
 */
export type IntegrationApiDeleteByIdRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof IntegrationApiDeleteById
    */
    readonly appId: string
    
    /**
    * The integ\'s ID
    * @type {string}
    * @memberof IntegrationApiDeleteById
    */
    readonly integId: string
    
}

/**
 * Request parameters for getById operation in IntegrationApi.
 * @export
 * @interface IntegrationApiGetByIdRequest
 */
export type IntegrationApiGetByIdRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof IntegrationApiGetById
    */
    readonly appId: string
    
    /**
    * The integ\'s ID
    * @type {string}
    * @memberof IntegrationApiGetById
    */
    readonly integId: string
    
}

/**
 * Request parameters for getKey operation in IntegrationApi.
 * @export
 * @interface IntegrationApiGetKeyRequest
 */
export type IntegrationApiGetKeyRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof IntegrationApiGetKey
    */
    readonly appId: string
    
    /**
    * The integ\'s ID
    * @type {string}
    * @memberof IntegrationApiGetKey
    */
    readonly integId: string
    
}

/**
 * Request parameters for list operation in IntegrationApi.
 * @export
 * @interface IntegrationApiListRequest
 */
export type IntegrationApiListRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof IntegrationApiList
    */
    readonly appId: string
    
    /**
    * Limit the number of returned items
    * @type {number}
    * @memberof IntegrationApiList
    */
    readonly limit?: number
    
    /**
    * The iterator returned from a prior invocation
    * @type {string}
    * @memberof IntegrationApiList
    */
    readonly iterator?: string
    
}

/**
 * Request parameters for rotateKey operation in IntegrationApi.
 * @export
 * @interface IntegrationApiRotateKeyRequest
 */
export type IntegrationApiRotateKeyRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof IntegrationApiRotateKey
    */
    readonly appId: string
    
    /**
    * The integ\'s ID
    * @type {string}
    * @memberof IntegrationApiRotateKey
    */
    readonly integId: string
    
    /**
    * The request\'s idempotency key
    * @type {string}
    * @memberof IntegrationApiRotateKey
    */
    readonly idempotencyKey?: string
    
}

/**
 * Request parameters for updateIntegrationById operation in IntegrationApi.
 * @export
 * @interface IntegrationApiUpdateIntegrationByIdRequest
 */
export type IntegrationApiUpdateIntegrationByIdRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof IntegrationApiUpdateIntegrationById
    */
    readonly appId: string
    
    /**
    * The integ\'s ID
    * @type {string}
    * @memberof IntegrationApiUpdateIntegrationById
    */
    readonly integId: string
    
} & IntegrationUpdate

/**
 * IntegrationApiGenerated - object-oriented interface
 * @export
 * @class IntegrationApiGenerated
 * @extends {BaseAPI}
 */
export class IntegrationApiGenerated extends BaseAPI {
    /**
     * Create an integration.
     * @summary Create Integration
     * @param {IntegrationApiCreateNewIntegrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApiGenerated
     */
    public createNewIntegration(requestParameters: IntegrationApiCreateNewIntegrationRequest, options?: AxiosRequestConfig) {
        return IntegrationApiFp(this.configuration).createNewIntegration(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an integration.
     * @summary Delete Integration
     * @param {IntegrationApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApiGenerated
     */
    public deleteById(requestParameters: IntegrationApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return IntegrationApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an integration.
     * @summary Get Integration
     * @param {IntegrationApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApiGenerated
     */
    public getById(requestParameters: IntegrationApiGetByIdRequest, options?: AxiosRequestConfig) {
        return IntegrationApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an integration\'s key.
     * @summary Get Integration Key
     * @param {IntegrationApiGetKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApiGenerated
     */
    public getKey(requestParameters: IntegrationApiGetKeyRequest, options?: AxiosRequestConfig) {
        return IntegrationApiFp(this.configuration).getKey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the application\'s integrations.
     * @summary List Integrations
     * @param {IntegrationApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApiGenerated
     */
    public list(requestParameters: IntegrationApiListRequest, options?: AxiosRequestConfig) {
        return IntegrationApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Rotate the integration\'s key. The previous key will be immediately revoked.
     * @summary Rotate Integration Key
     * @param {IntegrationApiRotateKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApiGenerated
     */
    public rotateKey(requestParameters: IntegrationApiRotateKeyRequest, options?: AxiosRequestConfig) {
        return IntegrationApiFp(this.configuration).rotateKey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an integration.
     * @summary Update Integration
     * @param {IntegrationApiUpdateIntegrationByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationApiGenerated
     */
    public updateIntegrationById(requestParameters: IntegrationApiUpdateIntegrationByIdRequest, options?: AxiosRequestConfig) {
        return IntegrationApiFp(this.configuration).updateIntegrationById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
