/* tslint:disable */
/* eslint-disable */
/*
Svix API

Welcome to the Svix API documentation!

Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)

# Introduction

This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).

## Main concepts

In Svix you have four important entities you will be interacting with:

- `messages`: these are the webhooks being sent. They can have contents and a few other properties.
- `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform.
- `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type).
- `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.


## Authentication

Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`. For more information on authentication, please refer to the [authentication token docs](https://docs.svix.com/api-keys).




## Code samples

The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).


## Idempotency

Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.

To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.

Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result for a period of up to 12 hours.

Please note that idempotency is only supported for `POST` requests.


## Cross-Origin Resource Sharing

This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.


The version of the OpenAPI document: 1.20.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EndpointHeadersIn } from '../models';
// @ts-ignore
import { EndpointHeadersOut } from '../models';
// @ts-ignore
import { EndpointHeadersPatchIn } from '../models';
// @ts-ignore
import { EndpointIn } from '../models';
// @ts-ignore
import { EndpointOut } from '../models';
// @ts-ignore
import { EndpointPatch } from '../models';
// @ts-ignore
import { EndpointSecretOut } from '../models';
// @ts-ignore
import { EndpointSecretRotateIn } from '../models';
// @ts-ignore
import { EndpointStats } from '../models';
// @ts-ignore
import { EndpointTransformationIn } from '../models';
// @ts-ignore
import { EndpointTransformationOut } from '../models';
// @ts-ignore
import { EndpointUpdate } from '../models';
// @ts-ignore
import { EventExampleIn } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { HttpErrorOut } from '../models';
// @ts-ignore
import { ListResponseEndpointOut } from '../models';
// @ts-ignore
import { MessageOut } from '../models';
// @ts-ignore
import { Ordering } from '../models';
// @ts-ignore
import { RecoverIn } from '../models';
// @ts-ignore
import { RecoverOut } from '../models';
// @ts-ignore
import { ReplayIn } from '../models';
// @ts-ignore
import { ReplayOut } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EndpointApi - axios parameter creator
 * @export
 */
export const EndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new endpoint for the application.  When `secret` is `null` the secret is automatically generated (recommended)
         * @summary Create Endpoint
         * @param {string} appId The app\&#39;s ID or UID
         * @param {EndpointIn} endpointIn 
         * @param {string} [idempotencyKey] The request\&#39;s idempotency key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNew: async (appId: string, endpointIn: EndpointIn, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('createNew', 'appId', appId)
            // verify required parameter 'endpointIn' is not null or undefined
            assertParamExists('createNew', 'endpointIn', endpointIn)
            const localVarPath = `/api/v1/app/{app_id}/endpoint`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['idempotency-key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: endpointIn,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/endpoint',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(endpointIn, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an endpoint.
         * @summary Get Endpoint
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} endpointId The ep\&#39;s ID or UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEndpoint: async (appId: string, endpointId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('getEndpoint', 'appId', appId)
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('getEndpoint', 'endpointId', endpointId)
            const localVarPath = `/api/v1/app/{app_id}/endpoint/{endpoint_id}`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId !== undefined ? endpointId : `-endpoint_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/endpoint/{endpoint_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the additional headers to be sent with the webhook
         * @summary Get Endpoint Headers
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} endpointId The ep\&#39;s ID or UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeaders: async (appId: string, endpointId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('getHeaders', 'appId', appId)
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('getHeaders', 'endpointId', endpointId)
            const localVarPath = `/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId !== undefined ? endpointId : `-endpoint_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the endpoint\'s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).
         * @summary Get Endpoint Secret
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} endpointId The ep\&#39;s ID or UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecret: async (appId: string, endpointId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('getSecret', 'appId', appId)
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('getSecret', 'endpointId', endpointId)
            const localVarPath = `/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId !== undefined ? endpointId : `-endpoint_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get basic statistics for the endpoint.
         * @summary Endpoint Stats
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} endpointId The ep\&#39;s ID or UID
         * @param {string} [since] Filter the range to data starting from this date
         * @param {string} [until] Filter the range to data ending by this date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStats: async (appId: string, endpointId: string, since?: string, until?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('getStats', 'appId', appId)
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('getStats', 'endpointId', endpointId)
            const localVarPath = `/api/v1/app/{app_id}/endpoint/{endpoint_id}/stats`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId !== undefined ? endpointId : `-endpoint_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (since !== undefined) {
                localVarQueryParameter['since'] = (since as any instanceof Date) ?
                    (since as any).toISOString() :
                    since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = (until as any instanceof Date) ?
                    (until as any).toISOString() :
                    until;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/endpoint/{endpoint_id}/stats',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the transformation code associated with this endpoint
         * @summary Get Endpoint Transformation
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} endpointId The ep\&#39;s ID or UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransformationCode: async (appId: string, endpointId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('getTransformationCode', 'appId', appId)
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('getTransformationCode', 'endpointId', endpointId)
            const localVarPath = `/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId !== undefined ? endpointId : `-endpoint_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the application\'s endpoints.
         * @summary List Endpoints
         * @param {string} appId The app\&#39;s ID or UID
         * @param {number} [limit] Limit the number of returned items
         * @param {string} [iterator] The iterator returned from a prior invocation
         * @param {Ordering} [order] The sorting order of the returned items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEndpoints: async (appId: string, limit?: number, iterator?: string, order?: Ordering, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('listEndpoints', 'appId', appId)
            const localVarPath = `/api/v1/app/{app_id}/endpoint`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (iterator !== undefined) {
                localVarQueryParameter['iterator'] = iterator;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/endpoint',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially set the additional headers to be sent with the webhook
         * @summary Patch Endpoint Headers
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} endpointId The ep\&#39;s ID or UID
         * @param {EndpointHeadersPatchIn} endpointHeadersPatchIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiallySetHeaders: async (appId: string, endpointId: string, endpointHeadersPatchIn: EndpointHeadersPatchIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('partiallySetHeaders', 'appId', appId)
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('partiallySetHeaders', 'endpointId', endpointId)
            // verify required parameter 'endpointHeadersPatchIn' is not null or undefined
            assertParamExists('partiallySetHeaders', 'endpointHeadersPatchIn', endpointHeadersPatchIn)
            const localVarPath = `/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId !== undefined ? endpointId : `-endpoint_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: endpointHeadersPatchIn,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(endpointHeadersPatchIn, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially update an endpoint.
         * @summary Patch Endpoint
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} endpointId The ep\&#39;s ID or UID
         * @param {EndpointPatch} endpointPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiallyUpdate: async (appId: string, endpointId: string, endpointPatch: EndpointPatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('partiallyUpdate', 'appId', appId)
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('partiallyUpdate', 'endpointId', endpointId)
            // verify required parameter 'endpointPatch' is not null or undefined
            assertParamExists('partiallyUpdate', 'endpointPatch', endpointPatch)
            const localVarPath = `/api/v1/app/{app_id}/endpoint/{endpoint_id}`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId !== undefined ? endpointId : `-endpoint_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: endpointPatch,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/endpoint/{endpoint_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(endpointPatch, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an endpoint.
         * @summary Delete Endpoint
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} endpointId The ep\&#39;s ID or UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove: async (appId: string, endpointId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('remove', 'appId', appId)
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('remove', 'endpointId', endpointId)
            const localVarPath = `/api/v1/app/{app_id}/endpoint/{endpoint_id}`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId !== undefined ? endpointId : `-endpoint_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/endpoint/{endpoint_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replays messages to the endpoint. Only messages that were created after `since` will be sent. Messages that were previously sent to the endpoint are not resent.
         * @summary Replay Missing Webhooks
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} endpointId The ep\&#39;s ID or UID
         * @param {ReplayIn} replayIn 
         * @param {string} [idempotencyKey] The request\&#39;s idempotency key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replayMissingWebhooks: async (appId: string, endpointId: string, replayIn: ReplayIn, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('replayMissingWebhooks', 'appId', appId)
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('replayMissingWebhooks', 'endpointId', endpointId)
            // verify required parameter 'replayIn' is not null or undefined
            assertParamExists('replayMissingWebhooks', 'replayIn', replayIn)
            const localVarPath = `/api/v1/app/{app_id}/endpoint/{endpoint_id}/replay-missing`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId !== undefined ? endpointId : `-endpoint_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['idempotency-key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: replayIn,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/endpoint/{endpoint_id}/replay-missing',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(replayIn, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resend all failed messages since a given time.
         * @summary Recover Failed Webhooks
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} endpointId The ep\&#39;s ID or UID
         * @param {RecoverIn} recoverIn 
         * @param {string} [idempotencyKey] The request\&#39;s idempotency key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendFailedWebhooks: async (appId: string, endpointId: string, recoverIn: RecoverIn, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('resendFailedWebhooks', 'appId', appId)
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('resendFailedWebhooks', 'endpointId', endpointId)
            // verify required parameter 'recoverIn' is not null or undefined
            assertParamExists('resendFailedWebhooks', 'recoverIn', recoverIn)
            const localVarPath = `/api/v1/app/{app_id}/endpoint/{endpoint_id}/recover`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId !== undefined ? endpointId : `-endpoint_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['idempotency-key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: recoverIn,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/endpoint/{endpoint_id}/recover',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(recoverIn, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Rotates the endpoint\'s signing secret.  The previous secret will be valid for the next 24 hours.
         * @summary Rotate Endpoint Secret
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} endpointId The ep\&#39;s ID or UID
         * @param {EndpointSecretRotateIn} endpointSecretRotateIn 
         * @param {string} [idempotencyKey] The request\&#39;s idempotency key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rotateSecret: async (appId: string, endpointId: string, endpointSecretRotateIn: EndpointSecretRotateIn, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('rotateSecret', 'appId', appId)
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('rotateSecret', 'endpointId', endpointId)
            // verify required parameter 'endpointSecretRotateIn' is not null or undefined
            assertParamExists('rotateSecret', 'endpointSecretRotateIn', endpointSecretRotateIn)
            const localVarPath = `/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/rotate`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId !== undefined ? endpointId : `-endpoint_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['idempotency-key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: endpointSecretRotateIn,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/rotate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(endpointSecretRotateIn, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send an example message for event
         * @summary Send Event Type Example Message
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} endpointId The ep\&#39;s ID or UID
         * @param {EventExampleIn} eventExampleIn 
         * @param {string} [idempotencyKey] The request\&#39;s idempotency key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendExampleMessage: async (appId: string, endpointId: string, eventExampleIn: EventExampleIn, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('sendExampleMessage', 'appId', appId)
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('sendExampleMessage', 'endpointId', endpointId)
            // verify required parameter 'eventExampleIn' is not null or undefined
            assertParamExists('sendExampleMessage', 'eventExampleIn', eventExampleIn)
            const localVarPath = `/api/v1/app/{app_id}/endpoint/{endpoint_id}/send-example`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId !== undefined ? endpointId : `-endpoint_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['idempotency-key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: eventExampleIn,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/endpoint/{endpoint_id}/send-example',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(eventExampleIn, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set or unset the transformation code associated with this endpoint
         * @summary Set Endpoint Transformation
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} endpointId The ep\&#39;s ID or UID
         * @param {EndpointTransformationIn} endpointTransformationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setTransformationCode: async (appId: string, endpointId: string, endpointTransformationIn: EndpointTransformationIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('setTransformationCode', 'appId', appId)
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('setTransformationCode', 'endpointId', endpointId)
            // verify required parameter 'endpointTransformationIn' is not null or undefined
            assertParamExists('setTransformationCode', 'endpointTransformationIn', endpointTransformationIn)
            const localVarPath = `/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId !== undefined ? endpointId : `-endpoint_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: endpointTransformationIn,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(endpointTransformationIn, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an endpoint.
         * @summary Update Endpoint
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} endpointId The ep\&#39;s ID or UID
         * @param {EndpointUpdate} endpointUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEndpoint: async (appId: string, endpointId: string, endpointUpdate: EndpointUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('updateEndpoint', 'appId', appId)
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('updateEndpoint', 'endpointId', endpointId)
            // verify required parameter 'endpointUpdate' is not null or undefined
            assertParamExists('updateEndpoint', 'endpointUpdate', endpointUpdate)
            const localVarPath = `/api/v1/app/{app_id}/endpoint/{endpoint_id}`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId !== undefined ? endpointId : `-endpoint_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: endpointUpdate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/endpoint/{endpoint_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(endpointUpdate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the additional headers to be sent with the webhook
         * @summary Update Endpoint Headers
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} endpointId The ep\&#39;s ID or UID
         * @param {EndpointHeadersIn} endpointHeadersIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHeaders: async (appId: string, endpointId: string, endpointHeadersIn: EndpointHeadersIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('updateHeaders', 'appId', appId)
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('updateHeaders', 'endpointId', endpointId)
            // verify required parameter 'endpointHeadersIn' is not null or undefined
            assertParamExists('updateHeaders', 'endpointHeadersIn', endpointHeadersIn)
            const localVarPath = `/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId !== undefined ? endpointId : `-endpoint_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: endpointHeadersIn,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(endpointHeadersIn, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndpointApi - functional programming interface
 * @export
 */
export const EndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EndpointApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new endpoint for the application.  When `secret` is `null` the secret is automatically generated (recommended)
         * @summary Create Endpoint
         * @param {EndpointApiCreateNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNew(requestParameters: EndpointApiCreateNewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EndpointOut>> {
            const endpointIn: EndpointIn = {
                description: requestParameters.description,
                version: requestParameters.version,
                rateLimit: requestParameters.rateLimit,
                uid: requestParameters.uid,
                url: requestParameters.url,
                disabled: requestParameters.disabled,
                filterTypes: requestParameters.filterTypes,
                channels: requestParameters.channels,
                secret: requestParameters.secret,
                metadata: requestParameters.metadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNew(requestParameters.appId, endpointIn, requestParameters.idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an endpoint.
         * @summary Get Endpoint
         * @param {EndpointApiGetEndpointRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEndpoint(requestParameters: EndpointApiGetEndpointRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EndpointOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEndpoint(requestParameters.appId, requestParameters.endpointId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the additional headers to be sent with the webhook
         * @summary Get Endpoint Headers
         * @param {EndpointApiGetHeadersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeaders(requestParameters: EndpointApiGetHeadersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EndpointHeadersOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeaders(requestParameters.appId, requestParameters.endpointId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the endpoint\'s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).
         * @summary Get Endpoint Secret
         * @param {EndpointApiGetSecretRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSecret(requestParameters: EndpointApiGetSecretRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EndpointSecretOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSecret(requestParameters.appId, requestParameters.endpointId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get basic statistics for the endpoint.
         * @summary Endpoint Stats
         * @param {EndpointApiGetStatsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStats(requestParameters: EndpointApiGetStatsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EndpointStats>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStats(requestParameters.appId, requestParameters.endpointId, requestParameters.since, requestParameters.until, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the transformation code associated with this endpoint
         * @summary Get Endpoint Transformation
         * @param {EndpointApiGetTransformationCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransformationCode(requestParameters: EndpointApiGetTransformationCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EndpointTransformationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransformationCode(requestParameters.appId, requestParameters.endpointId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the application\'s endpoints.
         * @summary List Endpoints
         * @param {EndpointApiListEndpointsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEndpoints(requestParameters: EndpointApiListEndpointsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseEndpointOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEndpoints(requestParameters.appId, requestParameters.limit, requestParameters.iterator, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially set the additional headers to be sent with the webhook
         * @summary Patch Endpoint Headers
         * @param {EndpointApiPartiallySetHeadersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partiallySetHeaders(requestParameters: EndpointApiPartiallySetHeadersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const endpointHeadersPatchIn: EndpointHeadersPatchIn = {
                headers: requestParameters.headers
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.partiallySetHeaders(requestParameters.appId, requestParameters.endpointId, endpointHeadersPatchIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially update an endpoint.
         * @summary Patch Endpoint
         * @param {EndpointApiPartiallyUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partiallyUpdate(requestParameters: EndpointApiPartiallyUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EndpointOut>> {
            const endpointPatch: EndpointPatch = {
                description: requestParameters.description,
                version: requestParameters.version,
                rateLimit: requestParameters.rateLimit,
                uid: requestParameters.uid,
                url: requestParameters.url,
                disabled: requestParameters.disabled,
                filterTypes: requestParameters.filterTypes,
                channels: requestParameters.channels,
                secret: requestParameters.secret,
                metadata: requestParameters.metadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.partiallyUpdate(requestParameters.appId, requestParameters.endpointId, endpointPatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an endpoint.
         * @summary Delete Endpoint
         * @param {EndpointApiRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove(requestParameters: EndpointApiRemoveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remove(requestParameters.appId, requestParameters.endpointId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replays messages to the endpoint. Only messages that were created after `since` will be sent. Messages that were previously sent to the endpoint are not resent.
         * @summary Replay Missing Webhooks
         * @param {EndpointApiReplayMissingWebhooksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replayMissingWebhooks(requestParameters: EndpointApiReplayMissingWebhooksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReplayOut>> {
            const replayIn: ReplayIn = {
                since: requestParameters.since,
                until: requestParameters.until
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.replayMissingWebhooks(requestParameters.appId, requestParameters.endpointId, replayIn, requestParameters.idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Resend all failed messages since a given time.
         * @summary Recover Failed Webhooks
         * @param {EndpointApiResendFailedWebhooksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resendFailedWebhooks(requestParameters: EndpointApiResendFailedWebhooksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecoverOut>> {
            const recoverIn: RecoverIn = {
                since: requestParameters.since,
                until: requestParameters.until
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.resendFailedWebhooks(requestParameters.appId, requestParameters.endpointId, recoverIn, requestParameters.idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Rotates the endpoint\'s signing secret.  The previous secret will be valid for the next 24 hours.
         * @summary Rotate Endpoint Secret
         * @param {EndpointApiRotateSecretRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rotateSecret(requestParameters: EndpointApiRotateSecretRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const endpointSecretRotateIn: EndpointSecretRotateIn = {
                key: requestParameters.key
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.rotateSecret(requestParameters.appId, requestParameters.endpointId, endpointSecretRotateIn, requestParameters.idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Send an example message for event
         * @summary Send Event Type Example Message
         * @param {EndpointApiSendExampleMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendExampleMessage(requestParameters: EndpointApiSendExampleMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOut>> {
            const eventExampleIn: EventExampleIn = {
                eventType: requestParameters.eventType
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendExampleMessage(requestParameters.appId, requestParameters.endpointId, eventExampleIn, requestParameters.idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set or unset the transformation code associated with this endpoint
         * @summary Set Endpoint Transformation
         * @param {EndpointApiSetTransformationCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setTransformationCode(requestParameters: EndpointApiSetTransformationCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const endpointTransformationIn: EndpointTransformationIn = {
                code: requestParameters.code,
                enabled: requestParameters.enabled
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setTransformationCode(requestParameters.appId, requestParameters.endpointId, endpointTransformationIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an endpoint.
         * @summary Update Endpoint
         * @param {EndpointApiUpdateEndpointRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEndpoint(requestParameters: EndpointApiUpdateEndpointRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EndpointOut>> {
            const endpointUpdate: EndpointUpdate = {
                description: requestParameters.description,
                version: requestParameters.version,
                rateLimit: requestParameters.rateLimit,
                uid: requestParameters.uid,
                url: requestParameters.url,
                disabled: requestParameters.disabled,
                filterTypes: requestParameters.filterTypes,
                channels: requestParameters.channels,
                metadata: requestParameters.metadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEndpoint(requestParameters.appId, requestParameters.endpointId, endpointUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set the additional headers to be sent with the webhook
         * @summary Update Endpoint Headers
         * @param {EndpointApiUpdateHeadersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateHeaders(requestParameters: EndpointApiUpdateHeadersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const endpointHeadersIn: EndpointHeadersIn = {
                headers: requestParameters.headers
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateHeaders(requestParameters.appId, requestParameters.endpointId, endpointHeadersIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EndpointApi - factory interface
 * @export
 */
export const EndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EndpointApiFp(configuration)
    return {
        /**
         * Create a new endpoint for the application.  When `secret` is `null` the secret is automatically generated (recommended)
         * @summary Create Endpoint
         * @param {EndpointApiCreateNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNew(requestParameters: EndpointApiCreateNewRequest, options?: AxiosRequestConfig): AxiosPromise<EndpointOut> {
            return localVarFp.createNew(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an endpoint.
         * @summary Get Endpoint
         * @param {EndpointApiGetEndpointRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEndpoint(requestParameters: EndpointApiGetEndpointRequest, options?: AxiosRequestConfig): AxiosPromise<EndpointOut> {
            return localVarFp.getEndpoint(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the additional headers to be sent with the webhook
         * @summary Get Endpoint Headers
         * @param {EndpointApiGetHeadersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeaders(requestParameters: EndpointApiGetHeadersRequest, options?: AxiosRequestConfig): AxiosPromise<EndpointHeadersOut> {
            return localVarFp.getHeaders(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the endpoint\'s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).
         * @summary Get Endpoint Secret
         * @param {EndpointApiGetSecretRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecret(requestParameters: EndpointApiGetSecretRequest, options?: AxiosRequestConfig): AxiosPromise<EndpointSecretOut> {
            return localVarFp.getSecret(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get basic statistics for the endpoint.
         * @summary Endpoint Stats
         * @param {EndpointApiGetStatsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStats(requestParameters: EndpointApiGetStatsRequest, options?: AxiosRequestConfig): AxiosPromise<EndpointStats> {
            return localVarFp.getStats(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the transformation code associated with this endpoint
         * @summary Get Endpoint Transformation
         * @param {EndpointApiGetTransformationCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransformationCode(requestParameters: EndpointApiGetTransformationCodeRequest, options?: AxiosRequestConfig): AxiosPromise<EndpointTransformationOut> {
            return localVarFp.getTransformationCode(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the application\'s endpoints.
         * @summary List Endpoints
         * @param {EndpointApiListEndpointsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEndpoints(requestParameters: EndpointApiListEndpointsRequest, options?: AxiosRequestConfig): AxiosPromise<ListResponseEndpointOut> {
            return localVarFp.listEndpoints(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially set the additional headers to be sent with the webhook
         * @summary Patch Endpoint Headers
         * @param {EndpointApiPartiallySetHeadersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiallySetHeaders(requestParameters: EndpointApiPartiallySetHeadersRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.partiallySetHeaders(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially update an endpoint.
         * @summary Patch Endpoint
         * @param {EndpointApiPartiallyUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiallyUpdate(requestParameters: EndpointApiPartiallyUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<EndpointOut> {
            return localVarFp.partiallyUpdate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an endpoint.
         * @summary Delete Endpoint
         * @param {EndpointApiRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove(requestParameters: EndpointApiRemoveRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.remove(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Replays messages to the endpoint. Only messages that were created after `since` will be sent. Messages that were previously sent to the endpoint are not resent.
         * @summary Replay Missing Webhooks
         * @param {EndpointApiReplayMissingWebhooksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replayMissingWebhooks(requestParameters: EndpointApiReplayMissingWebhooksRequest, options?: AxiosRequestConfig): AxiosPromise<ReplayOut> {
            return localVarFp.replayMissingWebhooks(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Resend all failed messages since a given time.
         * @summary Recover Failed Webhooks
         * @param {EndpointApiResendFailedWebhooksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendFailedWebhooks(requestParameters: EndpointApiResendFailedWebhooksRequest, options?: AxiosRequestConfig): AxiosPromise<RecoverOut> {
            return localVarFp.resendFailedWebhooks(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Rotates the endpoint\'s signing secret.  The previous secret will be valid for the next 24 hours.
         * @summary Rotate Endpoint Secret
         * @param {EndpointApiRotateSecretRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rotateSecret(requestParameters: EndpointApiRotateSecretRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rotateSecret(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Send an example message for event
         * @summary Send Event Type Example Message
         * @param {EndpointApiSendExampleMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendExampleMessage(requestParameters: EndpointApiSendExampleMessageRequest, options?: AxiosRequestConfig): AxiosPromise<MessageOut> {
            return localVarFp.sendExampleMessage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Set or unset the transformation code associated with this endpoint
         * @summary Set Endpoint Transformation
         * @param {EndpointApiSetTransformationCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setTransformationCode(requestParameters: EndpointApiSetTransformationCodeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setTransformationCode(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an endpoint.
         * @summary Update Endpoint
         * @param {EndpointApiUpdateEndpointRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEndpoint(requestParameters: EndpointApiUpdateEndpointRequest, options?: AxiosRequestConfig): AxiosPromise<EndpointOut> {
            return localVarFp.updateEndpoint(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the additional headers to be sent with the webhook
         * @summary Update Endpoint Headers
         * @param {EndpointApiUpdateHeadersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHeaders(requestParameters: EndpointApiUpdateHeadersRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateHeaders(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNew operation in EndpointApi.
 * @export
 * @interface EndpointApiCreateNewRequest
 */
export type EndpointApiCreateNewRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof EndpointApiCreateNew
    */
    readonly appId: string
    
    /**
    * The request\'s idempotency key
    * @type {string}
    * @memberof EndpointApiCreateNew
    */
    readonly idempotencyKey?: string
    
} & EndpointIn

/**
 * Request parameters for getEndpoint operation in EndpointApi.
 * @export
 * @interface EndpointApiGetEndpointRequest
 */
export type EndpointApiGetEndpointRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof EndpointApiGetEndpoint
    */
    readonly appId: string
    
    /**
    * The ep\'s ID or UID
    * @type {string}
    * @memberof EndpointApiGetEndpoint
    */
    readonly endpointId: string
    
}

/**
 * Request parameters for getHeaders operation in EndpointApi.
 * @export
 * @interface EndpointApiGetHeadersRequest
 */
export type EndpointApiGetHeadersRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof EndpointApiGetHeaders
    */
    readonly appId: string
    
    /**
    * The ep\'s ID or UID
    * @type {string}
    * @memberof EndpointApiGetHeaders
    */
    readonly endpointId: string
    
}

/**
 * Request parameters for getSecret operation in EndpointApi.
 * @export
 * @interface EndpointApiGetSecretRequest
 */
export type EndpointApiGetSecretRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof EndpointApiGetSecret
    */
    readonly appId: string
    
    /**
    * The ep\'s ID or UID
    * @type {string}
    * @memberof EndpointApiGetSecret
    */
    readonly endpointId: string
    
}

/**
 * Request parameters for getStats operation in EndpointApi.
 * @export
 * @interface EndpointApiGetStatsRequest
 */
export type EndpointApiGetStatsRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof EndpointApiGetStats
    */
    readonly appId: string
    
    /**
    * The ep\'s ID or UID
    * @type {string}
    * @memberof EndpointApiGetStats
    */
    readonly endpointId: string
    
    /**
    * Filter the range to data starting from this date
    * @type {string}
    * @memberof EndpointApiGetStats
    */
    readonly since?: string
    
    /**
    * Filter the range to data ending by this date
    * @type {string}
    * @memberof EndpointApiGetStats
    */
    readonly until?: string
    
}

/**
 * Request parameters for getTransformationCode operation in EndpointApi.
 * @export
 * @interface EndpointApiGetTransformationCodeRequest
 */
export type EndpointApiGetTransformationCodeRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof EndpointApiGetTransformationCode
    */
    readonly appId: string
    
    /**
    * The ep\'s ID or UID
    * @type {string}
    * @memberof EndpointApiGetTransformationCode
    */
    readonly endpointId: string
    
}

/**
 * Request parameters for listEndpoints operation in EndpointApi.
 * @export
 * @interface EndpointApiListEndpointsRequest
 */
export type EndpointApiListEndpointsRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof EndpointApiListEndpoints
    */
    readonly appId: string
    
    /**
    * Limit the number of returned items
    * @type {number}
    * @memberof EndpointApiListEndpoints
    */
    readonly limit?: number
    
    /**
    * The iterator returned from a prior invocation
    * @type {string}
    * @memberof EndpointApiListEndpoints
    */
    readonly iterator?: string
    
    /**
    * The sorting order of the returned items
    * @type {Ordering}
    * @memberof EndpointApiListEndpoints
    */
    readonly order?: Ordering
    
}

/**
 * Request parameters for partiallySetHeaders operation in EndpointApi.
 * @export
 * @interface EndpointApiPartiallySetHeadersRequest
 */
export type EndpointApiPartiallySetHeadersRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof EndpointApiPartiallySetHeaders
    */
    readonly appId: string
    
    /**
    * The ep\'s ID or UID
    * @type {string}
    * @memberof EndpointApiPartiallySetHeaders
    */
    readonly endpointId: string
    
} & EndpointHeadersPatchIn

/**
 * Request parameters for partiallyUpdate operation in EndpointApi.
 * @export
 * @interface EndpointApiPartiallyUpdateRequest
 */
export type EndpointApiPartiallyUpdateRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof EndpointApiPartiallyUpdate
    */
    readonly appId: string
    
    /**
    * The ep\'s ID or UID
    * @type {string}
    * @memberof EndpointApiPartiallyUpdate
    */
    readonly endpointId: string
    
} & EndpointPatch

/**
 * Request parameters for remove operation in EndpointApi.
 * @export
 * @interface EndpointApiRemoveRequest
 */
export type EndpointApiRemoveRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof EndpointApiRemove
    */
    readonly appId: string
    
    /**
    * The ep\'s ID or UID
    * @type {string}
    * @memberof EndpointApiRemove
    */
    readonly endpointId: string
    
}

/**
 * Request parameters for replayMissingWebhooks operation in EndpointApi.
 * @export
 * @interface EndpointApiReplayMissingWebhooksRequest
 */
export type EndpointApiReplayMissingWebhooksRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof EndpointApiReplayMissingWebhooks
    */
    readonly appId: string
    
    /**
    * The ep\'s ID or UID
    * @type {string}
    * @memberof EndpointApiReplayMissingWebhooks
    */
    readonly endpointId: string
    
    /**
    * The request\'s idempotency key
    * @type {string}
    * @memberof EndpointApiReplayMissingWebhooks
    */
    readonly idempotencyKey?: string
    
} & ReplayIn

/**
 * Request parameters for resendFailedWebhooks operation in EndpointApi.
 * @export
 * @interface EndpointApiResendFailedWebhooksRequest
 */
export type EndpointApiResendFailedWebhooksRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof EndpointApiResendFailedWebhooks
    */
    readonly appId: string
    
    /**
    * The ep\'s ID or UID
    * @type {string}
    * @memberof EndpointApiResendFailedWebhooks
    */
    readonly endpointId: string
    
    /**
    * The request\'s idempotency key
    * @type {string}
    * @memberof EndpointApiResendFailedWebhooks
    */
    readonly idempotencyKey?: string
    
} & RecoverIn

/**
 * Request parameters for rotateSecret operation in EndpointApi.
 * @export
 * @interface EndpointApiRotateSecretRequest
 */
export type EndpointApiRotateSecretRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof EndpointApiRotateSecret
    */
    readonly appId: string
    
    /**
    * The ep\'s ID or UID
    * @type {string}
    * @memberof EndpointApiRotateSecret
    */
    readonly endpointId: string
    
    /**
    * The request\'s idempotency key
    * @type {string}
    * @memberof EndpointApiRotateSecret
    */
    readonly idempotencyKey?: string
    
} & EndpointSecretRotateIn

/**
 * Request parameters for sendExampleMessage operation in EndpointApi.
 * @export
 * @interface EndpointApiSendExampleMessageRequest
 */
export type EndpointApiSendExampleMessageRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof EndpointApiSendExampleMessage
    */
    readonly appId: string
    
    /**
    * The ep\'s ID or UID
    * @type {string}
    * @memberof EndpointApiSendExampleMessage
    */
    readonly endpointId: string
    
    /**
    * The request\'s idempotency key
    * @type {string}
    * @memberof EndpointApiSendExampleMessage
    */
    readonly idempotencyKey?: string
    
} & EventExampleIn

/**
 * Request parameters for setTransformationCode operation in EndpointApi.
 * @export
 * @interface EndpointApiSetTransformationCodeRequest
 */
export type EndpointApiSetTransformationCodeRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof EndpointApiSetTransformationCode
    */
    readonly appId: string
    
    /**
    * The ep\'s ID or UID
    * @type {string}
    * @memberof EndpointApiSetTransformationCode
    */
    readonly endpointId: string
    
} & EndpointTransformationIn

/**
 * Request parameters for updateEndpoint operation in EndpointApi.
 * @export
 * @interface EndpointApiUpdateEndpointRequest
 */
export type EndpointApiUpdateEndpointRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof EndpointApiUpdateEndpoint
    */
    readonly appId: string
    
    /**
    * The ep\'s ID or UID
    * @type {string}
    * @memberof EndpointApiUpdateEndpoint
    */
    readonly endpointId: string
    
} & EndpointUpdate

/**
 * Request parameters for updateHeaders operation in EndpointApi.
 * @export
 * @interface EndpointApiUpdateHeadersRequest
 */
export type EndpointApiUpdateHeadersRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof EndpointApiUpdateHeaders
    */
    readonly appId: string
    
    /**
    * The ep\'s ID or UID
    * @type {string}
    * @memberof EndpointApiUpdateHeaders
    */
    readonly endpointId: string
    
} & EndpointHeadersIn

/**
 * EndpointApiGenerated - object-oriented interface
 * @export
 * @class EndpointApiGenerated
 * @extends {BaseAPI}
 */
export class EndpointApiGenerated extends BaseAPI {
    /**
     * Create a new endpoint for the application.  When `secret` is `null` the secret is automatically generated (recommended)
     * @summary Create Endpoint
     * @param {EndpointApiCreateNewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointApiGenerated
     */
    public createNew(requestParameters: EndpointApiCreateNewRequest, options?: AxiosRequestConfig) {
        return EndpointApiFp(this.configuration).createNew(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an endpoint.
     * @summary Get Endpoint
     * @param {EndpointApiGetEndpointRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointApiGenerated
     */
    public getEndpoint(requestParameters: EndpointApiGetEndpointRequest, options?: AxiosRequestConfig) {
        return EndpointApiFp(this.configuration).getEndpoint(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the additional headers to be sent with the webhook
     * @summary Get Endpoint Headers
     * @param {EndpointApiGetHeadersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointApiGenerated
     */
    public getHeaders(requestParameters: EndpointApiGetHeadersRequest, options?: AxiosRequestConfig) {
        return EndpointApiFp(this.configuration).getHeaders(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the endpoint\'s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).
     * @summary Get Endpoint Secret
     * @param {EndpointApiGetSecretRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointApiGenerated
     */
    public getSecret(requestParameters: EndpointApiGetSecretRequest, options?: AxiosRequestConfig) {
        return EndpointApiFp(this.configuration).getSecret(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get basic statistics for the endpoint.
     * @summary Endpoint Stats
     * @param {EndpointApiGetStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointApiGenerated
     */
    public getStats(requestParameters: EndpointApiGetStatsRequest, options?: AxiosRequestConfig) {
        return EndpointApiFp(this.configuration).getStats(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the transformation code associated with this endpoint
     * @summary Get Endpoint Transformation
     * @param {EndpointApiGetTransformationCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointApiGenerated
     */
    public getTransformationCode(requestParameters: EndpointApiGetTransformationCodeRequest, options?: AxiosRequestConfig) {
        return EndpointApiFp(this.configuration).getTransformationCode(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the application\'s endpoints.
     * @summary List Endpoints
     * @param {EndpointApiListEndpointsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointApiGenerated
     */
    public listEndpoints(requestParameters: EndpointApiListEndpointsRequest, options?: AxiosRequestConfig) {
        return EndpointApiFp(this.configuration).listEndpoints(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially set the additional headers to be sent with the webhook
     * @summary Patch Endpoint Headers
     * @param {EndpointApiPartiallySetHeadersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointApiGenerated
     */
    public partiallySetHeaders(requestParameters: EndpointApiPartiallySetHeadersRequest, options?: AxiosRequestConfig) {
        return EndpointApiFp(this.configuration).partiallySetHeaders(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially update an endpoint.
     * @summary Patch Endpoint
     * @param {EndpointApiPartiallyUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointApiGenerated
     */
    public partiallyUpdate(requestParameters: EndpointApiPartiallyUpdateRequest, options?: AxiosRequestConfig) {
        return EndpointApiFp(this.configuration).partiallyUpdate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an endpoint.
     * @summary Delete Endpoint
     * @param {EndpointApiRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointApiGenerated
     */
    public remove(requestParameters: EndpointApiRemoveRequest, options?: AxiosRequestConfig) {
        return EndpointApiFp(this.configuration).remove(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replays messages to the endpoint. Only messages that were created after `since` will be sent. Messages that were previously sent to the endpoint are not resent.
     * @summary Replay Missing Webhooks
     * @param {EndpointApiReplayMissingWebhooksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointApiGenerated
     */
    public replayMissingWebhooks(requestParameters: EndpointApiReplayMissingWebhooksRequest, options?: AxiosRequestConfig) {
        return EndpointApiFp(this.configuration).replayMissingWebhooks(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resend all failed messages since a given time.
     * @summary Recover Failed Webhooks
     * @param {EndpointApiResendFailedWebhooksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointApiGenerated
     */
    public resendFailedWebhooks(requestParameters: EndpointApiResendFailedWebhooksRequest, options?: AxiosRequestConfig) {
        return EndpointApiFp(this.configuration).resendFailedWebhooks(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Rotates the endpoint\'s signing secret.  The previous secret will be valid for the next 24 hours.
     * @summary Rotate Endpoint Secret
     * @param {EndpointApiRotateSecretRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointApiGenerated
     */
    public rotateSecret(requestParameters: EndpointApiRotateSecretRequest, options?: AxiosRequestConfig) {
        return EndpointApiFp(this.configuration).rotateSecret(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send an example message for event
     * @summary Send Event Type Example Message
     * @param {EndpointApiSendExampleMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointApiGenerated
     */
    public sendExampleMessage(requestParameters: EndpointApiSendExampleMessageRequest, options?: AxiosRequestConfig) {
        return EndpointApiFp(this.configuration).sendExampleMessage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set or unset the transformation code associated with this endpoint
     * @summary Set Endpoint Transformation
     * @param {EndpointApiSetTransformationCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointApiGenerated
     */
    public setTransformationCode(requestParameters: EndpointApiSetTransformationCodeRequest, options?: AxiosRequestConfig) {
        return EndpointApiFp(this.configuration).setTransformationCode(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an endpoint.
     * @summary Update Endpoint
     * @param {EndpointApiUpdateEndpointRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointApiGenerated
     */
    public updateEndpoint(requestParameters: EndpointApiUpdateEndpointRequest, options?: AxiosRequestConfig) {
        return EndpointApiFp(this.configuration).updateEndpoint(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the additional headers to be sent with the webhook
     * @summary Update Endpoint Headers
     * @param {EndpointApiUpdateHeadersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointApiGenerated
     */
    public updateHeaders(requestParameters: EndpointApiUpdateHeadersRequest, options?: AxiosRequestConfig) {
        return EndpointApiFp(this.configuration).updateHeaders(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
