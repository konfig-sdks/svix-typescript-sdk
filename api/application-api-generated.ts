/* tslint:disable */
/* eslint-disable */
/*
Svix API

Welcome to the Svix API documentation!

Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)

# Introduction

This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).

## Main concepts

In Svix you have four important entities you will be interacting with:

- `messages`: these are the webhooks being sent. They can have contents and a few other properties.
- `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform.
- `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type).
- `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.


## Authentication

Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`. For more information on authentication, please refer to the [authentication token docs](https://docs.svix.com/api-keys).




## Code samples

The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).


## Idempotency

Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.

To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.

Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result for a period of up to 12 hours.

Please note that idempotency is only supported for `POST` requests.


## Cross-Origin Resource Sharing

This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.


The version of the OpenAPI document: 1.20.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApplicationIn } from '../models';
// @ts-ignore
import { ApplicationOut } from '../models';
// @ts-ignore
import { ApplicationPatch } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { HttpErrorOut } from '../models';
// @ts-ignore
import { ListResponseApplicationOut } from '../models';
// @ts-ignore
import { Ordering } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ApplicationApi - axios parameter creator
 * @export
 */
export const ApplicationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new application.
         * @summary Create Application
         * @param {ApplicationIn} applicationIn 
         * @param {boolean} [getIfExists] Get an existing application, or create a new one if doesn\&#39;t exist. It\&#39;s two separate functions in the libs.
         * @param {string} [idempotencyKey] The request\&#39;s idempotency key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewApplication: async (applicationIn: ApplicationIn, getIfExists?: boolean, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationIn' is not null or undefined
            assertParamExists('createNewApplication', 'applicationIn', applicationIn)
            const localVarPath = `/api/v1/app`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (getIfExists !== undefined) {
                localVarQueryParameter['get_if_exists'] = getIfExists;
            }

            if (idempotencyKey != null) {
                localVarHeaderParameter['idempotency-key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: applicationIn,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(applicationIn, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an application.
         * @summary Get Application
         * @param {string} appId The app\&#39;s ID or UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (appId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('getById', 'appId', appId)
            const localVarPath = `/api/v1/app/{app_id}`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of all the organization\'s applications.
         * @summary List Applications
         * @param {number} [limit] Limit the number of returned items
         * @param {string} [iterator] The iterator returned from a prior invocation
         * @param {Ordering} [order] The sorting order of the returned items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (limit?: number, iterator?: string, order?: Ordering, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/app`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (iterator !== undefined) {
                localVarQueryParameter['iterator'] = iterator;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially update an application.
         * @summary Patch Application
         * @param {string} appId The app\&#39;s ID or UID
         * @param {ApplicationPatch} applicationPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiallyUpdate: async (appId: string, applicationPatch: ApplicationPatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('partiallyUpdate', 'appId', appId)
            // verify required parameter 'applicationPatch' is not null or undefined
            assertParamExists('partiallyUpdate', 'applicationPatch', applicationPatch)
            const localVarPath = `/api/v1/app/{app_id}`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: applicationPatch,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(applicationPatch, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an application.
         * @summary Delete Application
         * @param {string} appId The app\&#39;s ID or UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeApp: async (appId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('removeApp', 'appId', appId)
            const localVarPath = `/api/v1/app/{app_id}`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an application.
         * @summary Update Application
         * @param {string} appId The app\&#39;s ID or UID
         * @param {ApplicationIn} applicationIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApp: async (appId: string, applicationIn: ApplicationIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('updateApp', 'appId', appId)
            // verify required parameter 'applicationIn' is not null or undefined
            assertParamExists('updateApp', 'applicationIn', applicationIn)
            const localVarPath = `/api/v1/app/{app_id}`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: applicationIn,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(applicationIn, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationApi - functional programming interface
 * @export
 */
export const ApplicationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApplicationApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new application.
         * @summary Create Application
         * @param {ApplicationApiCreateNewApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewApplication(requestParameters: ApplicationApiCreateNewApplicationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationOut>> {
            const applicationIn: ApplicationIn = {
                name: requestParameters.name,
                rateLimit: requestParameters.rateLimit,
                uid: requestParameters.uid,
                metadata: requestParameters.metadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewApplication(applicationIn, requestParameters.getIfExists, requestParameters.idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an application.
         * @summary Get Application
         * @param {ApplicationApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: ApplicationApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.appId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List of all the organization\'s applications.
         * @summary List Applications
         * @param {ApplicationApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: ApplicationApiListAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseApplicationOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.limit, requestParameters.iterator, requestParameters.order, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially update an application.
         * @summary Patch Application
         * @param {ApplicationApiPartiallyUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partiallyUpdate(requestParameters: ApplicationApiPartiallyUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationOut>> {
            const applicationPatch: ApplicationPatch = {
                name: requestParameters.name,
                rateLimit: requestParameters.rateLimit,
                uid: requestParameters.uid,
                metadata: requestParameters.metadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.partiallyUpdate(requestParameters.appId, applicationPatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an application.
         * @summary Delete Application
         * @param {ApplicationApiRemoveAppRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeApp(requestParameters: ApplicationApiRemoveAppRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeApp(requestParameters.appId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an application.
         * @summary Update Application
         * @param {ApplicationApiUpdateAppRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateApp(requestParameters: ApplicationApiUpdateAppRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationOut>> {
            const applicationIn: ApplicationIn = {
                name: requestParameters.name,
                rateLimit: requestParameters.rateLimit,
                uid: requestParameters.uid,
                metadata: requestParameters.metadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateApp(requestParameters.appId, applicationIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApplicationApi - factory interface
 * @export
 */
export const ApplicationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApplicationApiFp(configuration)
    return {
        /**
         * Create a new application.
         * @summary Create Application
         * @param {ApplicationApiCreateNewApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewApplication(requestParameters: ApplicationApiCreateNewApplicationRequest, options?: AxiosRequestConfig): AxiosPromise<ApplicationOut> {
            return localVarFp.createNewApplication(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an application.
         * @summary Get Application
         * @param {ApplicationApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: ApplicationApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ApplicationOut> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List of all the organization\'s applications.
         * @summary List Applications
         * @param {ApplicationApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: ApplicationApiListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListResponseApplicationOut> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially update an application.
         * @summary Patch Application
         * @param {ApplicationApiPartiallyUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiallyUpdate(requestParameters: ApplicationApiPartiallyUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<ApplicationOut> {
            return localVarFp.partiallyUpdate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an application.
         * @summary Delete Application
         * @param {ApplicationApiRemoveAppRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeApp(requestParameters: ApplicationApiRemoveAppRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeApp(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an application.
         * @summary Update Application
         * @param {ApplicationApiUpdateAppRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApp(requestParameters: ApplicationApiUpdateAppRequest, options?: AxiosRequestConfig): AxiosPromise<ApplicationOut> {
            return localVarFp.updateApp(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewApplication operation in ApplicationApi.
 * @export
 * @interface ApplicationApiCreateNewApplicationRequest
 */
export type ApplicationApiCreateNewApplicationRequest = {
    
    /**
    * Get an existing application, or create a new one if doesn\'t exist. It\'s two separate functions in the libs.
    * @type {boolean}
    * @memberof ApplicationApiCreateNewApplication
    */
    readonly getIfExists?: boolean
    
    /**
    * The request\'s idempotency key
    * @type {string}
    * @memberof ApplicationApiCreateNewApplication
    */
    readonly idempotencyKey?: string
    
} & ApplicationIn

/**
 * Request parameters for getById operation in ApplicationApi.
 * @export
 * @interface ApplicationApiGetByIdRequest
 */
export type ApplicationApiGetByIdRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof ApplicationApiGetById
    */
    readonly appId: string
    
}

/**
 * Request parameters for listAll operation in ApplicationApi.
 * @export
 * @interface ApplicationApiListAllRequest
 */
export type ApplicationApiListAllRequest = {
    
    /**
    * Limit the number of returned items
    * @type {number}
    * @memberof ApplicationApiListAll
    */
    readonly limit?: number
    
    /**
    * The iterator returned from a prior invocation
    * @type {string}
    * @memberof ApplicationApiListAll
    */
    readonly iterator?: string
    
    /**
    * The sorting order of the returned items
    * @type {Ordering}
    * @memberof ApplicationApiListAll
    */
    readonly order?: Ordering
    
}

/**
 * Request parameters for partiallyUpdate operation in ApplicationApi.
 * @export
 * @interface ApplicationApiPartiallyUpdateRequest
 */
export type ApplicationApiPartiallyUpdateRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof ApplicationApiPartiallyUpdate
    */
    readonly appId: string
    
} & ApplicationPatch

/**
 * Request parameters for removeApp operation in ApplicationApi.
 * @export
 * @interface ApplicationApiRemoveAppRequest
 */
export type ApplicationApiRemoveAppRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof ApplicationApiRemoveApp
    */
    readonly appId: string
    
}

/**
 * Request parameters for updateApp operation in ApplicationApi.
 * @export
 * @interface ApplicationApiUpdateAppRequest
 */
export type ApplicationApiUpdateAppRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof ApplicationApiUpdateApp
    */
    readonly appId: string
    
} & ApplicationIn

/**
 * ApplicationApiGenerated - object-oriented interface
 * @export
 * @class ApplicationApiGenerated
 * @extends {BaseAPI}
 */
export class ApplicationApiGenerated extends BaseAPI {
    /**
     * Create a new application.
     * @summary Create Application
     * @param {ApplicationApiCreateNewApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiGenerated
     */
    public createNewApplication(requestParameters: ApplicationApiCreateNewApplicationRequest, options?: AxiosRequestConfig) {
        return ApplicationApiFp(this.configuration).createNewApplication(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an application.
     * @summary Get Application
     * @param {ApplicationApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiGenerated
     */
    public getById(requestParameters: ApplicationApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ApplicationApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of all the organization\'s applications.
     * @summary List Applications
     * @param {ApplicationApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiGenerated
     */
    public listAll(requestParameters: ApplicationApiListAllRequest = {}, options?: AxiosRequestConfig) {
        return ApplicationApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially update an application.
     * @summary Patch Application
     * @param {ApplicationApiPartiallyUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiGenerated
     */
    public partiallyUpdate(requestParameters: ApplicationApiPartiallyUpdateRequest, options?: AxiosRequestConfig) {
        return ApplicationApiFp(this.configuration).partiallyUpdate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an application.
     * @summary Delete Application
     * @param {ApplicationApiRemoveAppRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiGenerated
     */
    public removeApp(requestParameters: ApplicationApiRemoveAppRequest, options?: AxiosRequestConfig) {
        return ApplicationApiFp(this.configuration).removeApp(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an application.
     * @summary Update Application
     * @param {ApplicationApiUpdateAppRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiGenerated
     */
    public updateApp(requestParameters: ApplicationApiUpdateAppRequest, options?: AxiosRequestConfig) {
        return ApplicationApiFp(this.configuration).updateApp(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
