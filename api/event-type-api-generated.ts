/* tslint:disable */
/* eslint-disable */
/*
Svix API

Welcome to the Svix API documentation!

Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)

# Introduction

This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).

## Main concepts

In Svix you have four important entities you will be interacting with:

- `messages`: these are the webhooks being sent. They can have contents and a few other properties.
- `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform.
- `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type).
- `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.


## Authentication

Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`. For more information on authentication, please refer to the [authentication token docs](https://docs.svix.com/api-keys).




## Code samples

The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).


## Idempotency

Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.

To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.

Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result for a period of up to 12 hours.

Please note that idempotency is only supported for `POST` requests.


## Cross-Origin Resource Sharing

This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.


The version of the OpenAPI document: 1.20.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EventTypeImportOpenApiIn } from '../models';
// @ts-ignore
import { EventTypeImportOpenApiOut } from '../models';
// @ts-ignore
import { EventTypeIn } from '../models';
// @ts-ignore
import { EventTypeOut } from '../models';
// @ts-ignore
import { EventTypePatch } from '../models';
// @ts-ignore
import { EventTypeUpdate } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { HttpErrorOut } from '../models';
// @ts-ignore
import { ListResponseEventTypeOut } from '../models';
// @ts-ignore
import { Ordering } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EventTypeApi - axios parameter creator
 * @export
 */
export const EventTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Archive an event type.  Endpoints already configured to filter on an event type will continue to do so after archival. However, new messages can not be sent with it and endpoints can not filter on it. An event type can be unarchived with the [create operation](#operation/create_event_type_api_v1_event_type__post).
         * @summary Delete Event Type
         * @param {string} eventTypeName The event type\&#39;s name
         * @param {boolean} [expunge] By default event types are archived when \&quot;deleted\&quot;. Passing this to &#x60;true&#x60; deletes them entirely.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveType: async (eventTypeName: string, expunge?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventTypeName' is not null or undefined
            assertParamExists('archiveType', 'eventTypeName', eventTypeName)
            const localVarPath = `/api/v1/event-type/{event_type_name}`
                .replace(`{${"event_type_name"}}`, encodeURIComponent(String(eventTypeName !== undefined ? eventTypeName : `-event_type_name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (expunge !== undefined) {
                localVarQueryParameter['expunge'] = expunge;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/event-type/{event_type_name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create new or unarchive existing event type.  Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it. Endpoints filtering on the event type before archival will continue to filter on it. This operation does not preserve the description and schemas.
         * @summary Create Event Type
         * @param {EventTypeIn} eventTypeIn 
         * @param {string} [idempotencyKey] The request\&#39;s idempotency key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdate: async (eventTypeIn: EventTypeIn, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventTypeIn' is not null or undefined
            assertParamExists('createOrUpdate', 'eventTypeIn', eventTypeIn)
            const localVarPath = `/api/v1/event-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['idempotency-key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: eventTypeIn,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/event-type',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(eventTypeIn, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an event type.
         * @summary Get Event Type
         * @param {string} eventTypeName The event type\&#39;s name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByName: async (eventTypeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventTypeName' is not null or undefined
            assertParamExists('getByName', 'eventTypeName', eventTypeName)
            const localVarPath = `/api/v1/event-type/{event_type_name}`
                .replace(`{${"event_type_name"}}`, encodeURIComponent(String(eventTypeName !== undefined ? eventTypeName : `-event_type_name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/event-type/{event_type_name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the list of event types.
         * @summary List Event Types
         * @param {number} [limit] Limit the number of returned items
         * @param {string} [iterator] The iterator returned from a prior invocation
         * @param {Ordering} [order] The sorting order of the returned items
         * @param {boolean} [includeArchived] When &#x60;true&#x60; archived (deleted but not expunged) items are included in the response
         * @param {boolean} [withContent] When &#x60;true&#x60; the full item (including the schema) is included in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (limit?: number, iterator?: string, order?: Ordering, includeArchived?: boolean, withContent?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/event-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (iterator !== undefined) {
                localVarQueryParameter['iterator'] = iterator;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (includeArchived !== undefined) {
                localVarQueryParameter['include_archived'] = includeArchived;
            }

            if (withContent !== undefined) {
                localVarQueryParameter['with_content'] = withContent;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/event-type',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Given an OpenAPI spec, create new or update existing event types. If an existing `archived` event type is updated, it will be unarchvied.  The importer will convert all webhooks found in the either the `webhooks` or `x-webhooks` top-level.
         * @summary Event Type Import From Openapi
         * @param {EventTypeImportOpenApiIn} eventTypeImportOpenApiIn Import a list of event types from webhooks defined in an OpenAPI spec.  The OpenAPI spec can be specified as either &#x60;spec&#x60; given the spec as a JSON object, or as &#x60;specRaw&#x60; (a &#x60;string&#x60;) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a &#x60;400&#x60; **Bad Request**.
         * @param {string} [idempotencyKey] The request\&#39;s idempotency key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importFromOpenapi: async (eventTypeImportOpenApiIn: EventTypeImportOpenApiIn, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventTypeImportOpenApiIn' is not null or undefined
            assertParamExists('importFromOpenapi', 'eventTypeImportOpenApiIn', eventTypeImportOpenApiIn)
            const localVarPath = `/api/v1/event-type/import/openapi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['idempotency-key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: eventTypeImportOpenApiIn,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/event-type/import/openapi',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(eventTypeImportOpenApiIn, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially update an event type.
         * @summary Patch Event Type
         * @param {string} eventTypeName The event type\&#39;s name
         * @param {EventTypePatch} eventTypePatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiallyUpdateType: async (eventTypeName: string, eventTypePatch: EventTypePatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventTypeName' is not null or undefined
            assertParamExists('partiallyUpdateType', 'eventTypeName', eventTypeName)
            // verify required parameter 'eventTypePatch' is not null or undefined
            assertParamExists('partiallyUpdateType', 'eventTypePatch', eventTypePatch)
            const localVarPath = `/api/v1/event-type/{event_type_name}`
                .replace(`{${"event_type_name"}}`, encodeURIComponent(String(eventTypeName !== undefined ? eventTypeName : `-event_type_name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: eventTypePatch,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/event-type/{event_type_name}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(eventTypePatch, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an event type.
         * @summary Update Event Type
         * @param {string} eventTypeName The event type\&#39;s name
         * @param {EventTypeUpdate} eventTypeUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateType: async (eventTypeName: string, eventTypeUpdate: EventTypeUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventTypeName' is not null or undefined
            assertParamExists('updateType', 'eventTypeName', eventTypeName)
            // verify required parameter 'eventTypeUpdate' is not null or undefined
            assertParamExists('updateType', 'eventTypeUpdate', eventTypeUpdate)
            const localVarPath = `/api/v1/event-type/{event_type_name}`
                .replace(`{${"event_type_name"}}`, encodeURIComponent(String(eventTypeName !== undefined ? eventTypeName : `-event_type_name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: eventTypeUpdate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/event-type/{event_type_name}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(eventTypeUpdate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventTypeApi - functional programming interface
 * @export
 */
export const EventTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * Archive an event type.  Endpoints already configured to filter on an event type will continue to do so after archival. However, new messages can not be sent with it and endpoints can not filter on it. An event type can be unarchived with the [create operation](#operation/create_event_type_api_v1_event_type__post).
         * @summary Delete Event Type
         * @param {EventTypeApiArchiveTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveType(requestParameters: EventTypeApiArchiveTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveType(requestParameters.eventTypeName, requestParameters.expunge, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create new or unarchive existing event type.  Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it. Endpoints filtering on the event type before archival will continue to filter on it. This operation does not preserve the description and schemas.
         * @summary Create Event Type
         * @param {EventTypeApiCreateOrUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrUpdate(requestParameters: EventTypeApiCreateOrUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTypeOut>> {
            const eventTypeIn: EventTypeIn = {
                description: requestParameters.description,
                name: requestParameters.name,
                archived: requestParameters.archived,
                schemas: requestParameters.schemas,
                featureFlag: requestParameters.featureFlag
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrUpdate(eventTypeIn, requestParameters.idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an event type.
         * @summary Get Event Type
         * @param {EventTypeApiGetByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByName(requestParameters: EventTypeApiGetByNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTypeOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByName(requestParameters.eventTypeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return the list of event types.
         * @summary List Event Types
         * @param {EventTypeApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(requestParameters: EventTypeApiGetListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseEventTypeOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(requestParameters.limit, requestParameters.iterator, requestParameters.order, requestParameters.includeArchived, requestParameters.withContent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Given an OpenAPI spec, create new or update existing event types. If an existing `archived` event type is updated, it will be unarchvied.  The importer will convert all webhooks found in the either the `webhooks` or `x-webhooks` top-level.
         * @summary Event Type Import From Openapi
         * @param {EventTypeApiImportFromOpenapiRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importFromOpenapi(requestParameters: EventTypeApiImportFromOpenapiRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTypeImportOpenApiOut>> {
            const eventTypeImportOpenApiIn: EventTypeImportOpenApiIn = {
                spec: requestParameters.spec,
                specRaw: requestParameters.specRaw
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.importFromOpenapi(eventTypeImportOpenApiIn, requestParameters.idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially update an event type.
         * @summary Patch Event Type
         * @param {EventTypeApiPartiallyUpdateTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partiallyUpdateType(requestParameters: EventTypeApiPartiallyUpdateTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTypeOut>> {
            const eventTypePatch: EventTypePatch = {
                description: requestParameters.description,
                archived: requestParameters.archived,
                schemas: requestParameters.schemas,
                featureFlag: requestParameters.featureFlag
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.partiallyUpdateType(requestParameters.eventTypeName, eventTypePatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an event type.
         * @summary Update Event Type
         * @param {EventTypeApiUpdateTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateType(requestParameters: EventTypeApiUpdateTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTypeOut>> {
            const eventTypeUpdate: EventTypeUpdate = {
                description: requestParameters.description,
                archived: requestParameters.archived,
                schemas: requestParameters.schemas,
                featureFlag: requestParameters.featureFlag
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateType(requestParameters.eventTypeName, eventTypeUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventTypeApi - factory interface
 * @export
 */
export const EventTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventTypeApiFp(configuration)
    return {
        /**
         * Archive an event type.  Endpoints already configured to filter on an event type will continue to do so after archival. However, new messages can not be sent with it and endpoints can not filter on it. An event type can be unarchived with the [create operation](#operation/create_event_type_api_v1_event_type__post).
         * @summary Delete Event Type
         * @param {EventTypeApiArchiveTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveType(requestParameters: EventTypeApiArchiveTypeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.archiveType(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create new or unarchive existing event type.  Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it. Endpoints filtering on the event type before archival will continue to filter on it. This operation does not preserve the description and schemas.
         * @summary Create Event Type
         * @param {EventTypeApiCreateOrUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrUpdate(requestParameters: EventTypeApiCreateOrUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<EventTypeOut> {
            return localVarFp.createOrUpdate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an event type.
         * @summary Get Event Type
         * @param {EventTypeApiGetByNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByName(requestParameters: EventTypeApiGetByNameRequest, options?: AxiosRequestConfig): AxiosPromise<EventTypeOut> {
            return localVarFp.getByName(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the list of event types.
         * @summary List Event Types
         * @param {EventTypeApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: EventTypeApiGetListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ListResponseEventTypeOut> {
            return localVarFp.getList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Given an OpenAPI spec, create new or update existing event types. If an existing `archived` event type is updated, it will be unarchvied.  The importer will convert all webhooks found in the either the `webhooks` or `x-webhooks` top-level.
         * @summary Event Type Import From Openapi
         * @param {EventTypeApiImportFromOpenapiRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importFromOpenapi(requestParameters: EventTypeApiImportFromOpenapiRequest, options?: AxiosRequestConfig): AxiosPromise<EventTypeImportOpenApiOut> {
            return localVarFp.importFromOpenapi(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially update an event type.
         * @summary Patch Event Type
         * @param {EventTypeApiPartiallyUpdateTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiallyUpdateType(requestParameters: EventTypeApiPartiallyUpdateTypeRequest, options?: AxiosRequestConfig): AxiosPromise<EventTypeOut> {
            return localVarFp.partiallyUpdateType(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an event type.
         * @summary Update Event Type
         * @param {EventTypeApiUpdateTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateType(requestParameters: EventTypeApiUpdateTypeRequest, options?: AxiosRequestConfig): AxiosPromise<EventTypeOut> {
            return localVarFp.updateType(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for archiveType operation in EventTypeApi.
 * @export
 * @interface EventTypeApiArchiveTypeRequest
 */
export type EventTypeApiArchiveTypeRequest = {
    
    /**
    * The event type\'s name
    * @type {string}
    * @memberof EventTypeApiArchiveType
    */
    readonly eventTypeName: string
    
    /**
    * By default event types are archived when \"deleted\". Passing this to `true` deletes them entirely.
    * @type {boolean}
    * @memberof EventTypeApiArchiveType
    */
    readonly expunge?: boolean
    
}

/**
 * Request parameters for createOrUpdate operation in EventTypeApi.
 * @export
 * @interface EventTypeApiCreateOrUpdateRequest
 */
export type EventTypeApiCreateOrUpdateRequest = {
    
    /**
    * The request\'s idempotency key
    * @type {string}
    * @memberof EventTypeApiCreateOrUpdate
    */
    readonly idempotencyKey?: string
    
} & EventTypeIn

/**
 * Request parameters for getByName operation in EventTypeApi.
 * @export
 * @interface EventTypeApiGetByNameRequest
 */
export type EventTypeApiGetByNameRequest = {
    
    /**
    * The event type\'s name
    * @type {string}
    * @memberof EventTypeApiGetByName
    */
    readonly eventTypeName: string
    
}

/**
 * Request parameters for getList operation in EventTypeApi.
 * @export
 * @interface EventTypeApiGetListRequest
 */
export type EventTypeApiGetListRequest = {
    
    /**
    * Limit the number of returned items
    * @type {number}
    * @memberof EventTypeApiGetList
    */
    readonly limit?: number
    
    /**
    * The iterator returned from a prior invocation
    * @type {string}
    * @memberof EventTypeApiGetList
    */
    readonly iterator?: string
    
    /**
    * The sorting order of the returned items
    * @type {Ordering}
    * @memberof EventTypeApiGetList
    */
    readonly order?: Ordering
    
    /**
    * When `true` archived (deleted but not expunged) items are included in the response
    * @type {boolean}
    * @memberof EventTypeApiGetList
    */
    readonly includeArchived?: boolean
    
    /**
    * When `true` the full item (including the schema) is included in the response
    * @type {boolean}
    * @memberof EventTypeApiGetList
    */
    readonly withContent?: boolean
    
}

/**
 * Request parameters for importFromOpenapi operation in EventTypeApi.
 * @export
 * @interface EventTypeApiImportFromOpenapiRequest
 */
export type EventTypeApiImportFromOpenapiRequest = {
    
    /**
    * The request\'s idempotency key
    * @type {string}
    * @memberof EventTypeApiImportFromOpenapi
    */
    readonly idempotencyKey?: string
    
} & EventTypeImportOpenApiIn

/**
 * Request parameters for partiallyUpdateType operation in EventTypeApi.
 * @export
 * @interface EventTypeApiPartiallyUpdateTypeRequest
 */
export type EventTypeApiPartiallyUpdateTypeRequest = {
    
    /**
    * The event type\'s name
    * @type {string}
    * @memberof EventTypeApiPartiallyUpdateType
    */
    readonly eventTypeName: string
    
} & EventTypePatch

/**
 * Request parameters for updateType operation in EventTypeApi.
 * @export
 * @interface EventTypeApiUpdateTypeRequest
 */
export type EventTypeApiUpdateTypeRequest = {
    
    /**
    * The event type\'s name
    * @type {string}
    * @memberof EventTypeApiUpdateType
    */
    readonly eventTypeName: string
    
} & EventTypeUpdate

/**
 * EventTypeApiGenerated - object-oriented interface
 * @export
 * @class EventTypeApiGenerated
 * @extends {BaseAPI}
 */
export class EventTypeApiGenerated extends BaseAPI {
    /**
     * Archive an event type.  Endpoints already configured to filter on an event type will continue to do so after archival. However, new messages can not be sent with it and endpoints can not filter on it. An event type can be unarchived with the [create operation](#operation/create_event_type_api_v1_event_type__post).
     * @summary Delete Event Type
     * @param {EventTypeApiArchiveTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTypeApiGenerated
     */
    public archiveType(requestParameters: EventTypeApiArchiveTypeRequest, options?: AxiosRequestConfig) {
        return EventTypeApiFp(this.configuration).archiveType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create new or unarchive existing event type.  Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it. Endpoints filtering on the event type before archival will continue to filter on it. This operation does not preserve the description and schemas.
     * @summary Create Event Type
     * @param {EventTypeApiCreateOrUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTypeApiGenerated
     */
    public createOrUpdate(requestParameters: EventTypeApiCreateOrUpdateRequest, options?: AxiosRequestConfig) {
        return EventTypeApiFp(this.configuration).createOrUpdate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an event type.
     * @summary Get Event Type
     * @param {EventTypeApiGetByNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTypeApiGenerated
     */
    public getByName(requestParameters: EventTypeApiGetByNameRequest, options?: AxiosRequestConfig) {
        return EventTypeApiFp(this.configuration).getByName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the list of event types.
     * @summary List Event Types
     * @param {EventTypeApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTypeApiGenerated
     */
    public getList(requestParameters: EventTypeApiGetListRequest = {}, options?: AxiosRequestConfig) {
        return EventTypeApiFp(this.configuration).getList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Given an OpenAPI spec, create new or update existing event types. If an existing `archived` event type is updated, it will be unarchvied.  The importer will convert all webhooks found in the either the `webhooks` or `x-webhooks` top-level.
     * @summary Event Type Import From Openapi
     * @param {EventTypeApiImportFromOpenapiRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTypeApiGenerated
     */
    public importFromOpenapi(requestParameters: EventTypeApiImportFromOpenapiRequest, options?: AxiosRequestConfig) {
        return EventTypeApiFp(this.configuration).importFromOpenapi(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially update an event type.
     * @summary Patch Event Type
     * @param {EventTypeApiPartiallyUpdateTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTypeApiGenerated
     */
    public partiallyUpdateType(requestParameters: EventTypeApiPartiallyUpdateTypeRequest, options?: AxiosRequestConfig) {
        return EventTypeApiFp(this.configuration).partiallyUpdateType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an event type.
     * @summary Update Event Type
     * @param {EventTypeApiUpdateTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventTypeApiGenerated
     */
    public updateType(requestParameters: EventTypeApiUpdateTypeRequest, options?: AxiosRequestConfig) {
        return EventTypeApiFp(this.configuration).updateType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
