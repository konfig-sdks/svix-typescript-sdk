/* tslint:disable */
/* eslint-disable */
/*
Svix API

Welcome to the Svix API documentation!

Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)

# Introduction

This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).

## Main concepts

In Svix you have four important entities you will be interacting with:

- `messages`: these are the webhooks being sent. They can have contents and a few other properties.
- `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform.
- `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type).
- `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.


## Authentication

Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`. For more information on authentication, please refer to the [authentication token docs](https://docs.svix.com/api-keys).




## Code samples

The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).


## Idempotency

Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.

To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.

Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result for a period of up to 12 hours.

Please note that idempotency is only supported for `POST` requests.


## Cross-Origin Resource Sharing

This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.


The version of the OpenAPI document: 1.21.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { HttpErrorOut } from '../models';
// @ts-ignore
import { ListResponseEndpointMessageOut } from '../models';
// @ts-ignore
import { ListResponseMessageAttemptEndpointOut } from '../models';
// @ts-ignore
import { ListResponseMessageAttemptOut } from '../models';
// @ts-ignore
import { ListResponseMessageEndpointOut } from '../models';
// @ts-ignore
import { MessageAttemptOut } from '../models';
// @ts-ignore
import { MessageStatus } from '../models';
// @ts-ignore
import { StatusCodeClass } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MessageAttemptApi - axios parameter creator
 * @export
 */
export const MessageAttemptApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes the given attempt\'s response body. Useful when an endpoint accidentally returned sensitive content.
         * @summary Delete attempt response body
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} msgId The msg\&#39;s ID or UID
         * @param {string} attemptId The attempt\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResponseBody: async (appId: string, msgId: string, attemptId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('deleteResponseBody', 'appId', appId)
            // verify required parameter 'msgId' is not null or undefined
            assertParamExists('deleteResponseBody', 'msgId', msgId)
            // verify required parameter 'attemptId' is not null or undefined
            assertParamExists('deleteResponseBody', 'attemptId', attemptId)
            const localVarPath = `/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/content`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"msg_id"}}`, encodeURIComponent(String(msgId !== undefined ? msgId : `-msg_id-`)))
                .replace(`{${"attempt_id"}}`, encodeURIComponent(String(attemptId !== undefined ? attemptId : `-attempt_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/content',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * `msg_id`: Use a message id or a message `eventId`
         * @summary Get Attempt
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} msgId The msg\&#39;s ID or UID
         * @param {string} attemptId The attempt\&#39;s ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByAttempt: async (appId: string, msgId: string, attemptId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('getByAttempt', 'appId', appId)
            // verify required parameter 'msgId' is not null or undefined
            assertParamExists('getByAttempt', 'msgId', msgId)
            // verify required parameter 'attemptId' is not null or undefined
            assertParamExists('getByAttempt', 'attemptId', attemptId)
            const localVarPath = `/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"msg_id"}}`, encodeURIComponent(String(msgId !== undefined ? msgId : `-msg_id-`)))
                .replace(`{${"attempt_id"}}`, encodeURIComponent(String(attemptId !== undefined ? attemptId : `-attempt_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List endpoints attempted by a given message. Additionally includes metadata about the latest message attempt. By default, endpoints are listed in ascending order by ID.
         * @summary List Attempted Destinations
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} msgId The msg\&#39;s ID or UID
         * @param {number} [limit] Limit the number of returned items
         * @param {string} [iterator] The iterator returned from a prior invocation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAttemptedDestinations: async (appId: string, msgId: string, limit?: number, iterator?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('listAttemptedDestinations', 'appId', appId)
            // verify required parameter 'msgId' is not null or undefined
            assertParamExists('listAttemptedDestinations', 'msgId', msgId)
            const localVarPath = `/api/v1/app/{app_id}/msg/{msg_id}/endpoint`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"msg_id"}}`, encodeURIComponent(String(msgId !== undefined ? msgId : `-msg_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (iterator !== undefined) {
                localVarQueryParameter['iterator'] = iterator;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/msg/{msg_id}/endpoint',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
         * @summary List Attempted Messages
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} endpointId The ep\&#39;s ID or UID
         * @param {number} [limit] Limit the number of returned items
         * @param {string} [iterator] The iterator returned from a prior invocation
         * @param {string} [channel] Filter response based on the channel
         * @param {string} [tag] Filter response based on the message tags
         * @param {MessageStatus} [status] Filter response based on the delivery status
         * @param {string} [before] Only include items created before a certain date
         * @param {string} [after] Only include items created after a certain date
         * @param {boolean} [withContent] When &#x60;true&#x60; message payloads are included in the response
         * @param {Set<string>} [eventTypes] Filter response based on the event type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAttemptedMessages: async (appId: string, endpointId: string, limit?: number, iterator?: string, channel?: string, tag?: string, status?: MessageStatus, before?: string, after?: string, withContent?: boolean, eventTypes?: Set<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('listAttemptedMessages', 'appId', appId)
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('listAttemptedMessages', 'endpointId', endpointId)
            const localVarPath = `/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId !== undefined ? endpointId : `-endpoint_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (iterator !== undefined) {
                localVarQueryParameter['iterator'] = iterator;
            }

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = (before as any instanceof Date) ?
                    (before as any).toISOString() :
                    before;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = (after as any instanceof Date) ?
                    (after as any).toISOString() :
                    after;
            }

            if (withContent !== undefined) {
                localVarQueryParameter['with_content'] = withContent;
            }

            if (eventTypes) {
                localVarQueryParameter['event_types'] = Array.from(eventTypes);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List attempts by endpoint id  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
         * @summary List Attempts By Endpoint
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} endpointId The ep\&#39;s ID or UID
         * @param {number} [limit] Limit the number of returned items
         * @param {string} [iterator] The iterator returned from a prior invocation
         * @param {MessageStatus} [status] Filter response based on the delivery status
         * @param {StatusCodeClass} [statusCodeClass] Filter response based on the HTTP status code
         * @param {string} [channel] Filter response based on the channel
         * @param {string} [tag] Filter response based on the tag
         * @param {string} [before] Only include items created before a certain date
         * @param {string} [after] Only include items created after a certain date
         * @param {boolean} [withContent] When &#x60;true&#x60; attempt content is included in the response
         * @param {boolean} [withMsg] When &#x60;true&#x60;, the message information is included in the response
         * @param {Set<string>} [eventTypes] Filter response based on the event type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByEndpoint: async (appId: string, endpointId: string, limit?: number, iterator?: string, status?: MessageStatus, statusCodeClass?: StatusCodeClass, channel?: string, tag?: string, before?: string, after?: string, withContent?: boolean, withMsg?: boolean, eventTypes?: Set<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('listByEndpoint', 'appId', appId)
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('listByEndpoint', 'endpointId', endpointId)
            const localVarPath = `/api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId !== undefined ? endpointId : `-endpoint_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (iterator !== undefined) {
                localVarQueryParameter['iterator'] = iterator;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (statusCodeClass !== undefined) {
                localVarQueryParameter['status_code_class'] = statusCodeClass;
            }

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = (before as any instanceof Date) ?
                    (before as any).toISOString() :
                    before;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = (after as any instanceof Date) ?
                    (after as any).toISOString() :
                    after;
            }

            if (withContent !== undefined) {
                localVarQueryParameter['with_content'] = withContent;
            }

            if (withMsg !== undefined) {
                localVarQueryParameter['with_msg'] = withMsg;
            }

            if (eventTypes) {
                localVarQueryParameter['event_types'] = Array.from(eventTypes);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.  List the message attempts for a particular endpoint.  Returning the endpoint.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
         * @summary List Attempts For Endpoint
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} msgId The msg\&#39;s ID or UID
         * @param {string} endpointId The ep\&#39;s ID or UID
         * @param {number} [limit] Limit the number of returned items
         * @param {string} [iterator] The iterator returned from a prior invocation
         * @param {string} [channel] Filter response based on the channel
         * @param {string} [tag] Filter response based on the tag
         * @param {MessageStatus} [status] Filter response based on the delivery status
         * @param {string} [before] Only include items created before a certain date
         * @param {string} [after] Only include items created after a certain date
         * @param {Set<string>} [eventTypes] Filter response based on the event type
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listByEndpointDeprecated: async (appId: string, msgId: string, endpointId: string, limit?: number, iterator?: string, channel?: string, tag?: string, status?: MessageStatus, before?: string, after?: string, eventTypes?: Set<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('listByEndpointDeprecated', 'appId', appId)
            // verify required parameter 'msgId' is not null or undefined
            assertParamExists('listByEndpointDeprecated', 'msgId', msgId)
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('listByEndpointDeprecated', 'endpointId', endpointId)
            const localVarPath = `/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/attempt`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"msg_id"}}`, encodeURIComponent(String(msgId !== undefined ? msgId : `-msg_id-`)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId !== undefined ? endpointId : `-endpoint_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (iterator !== undefined) {
                localVarQueryParameter['iterator'] = iterator;
            }

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = (before as any instanceof Date) ?
                    (before as any).toISOString() :
                    before;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = (after as any instanceof Date) ?
                    (after as any).toISOString() :
                    after;
            }

            if (eventTypes) {
                localVarQueryParameter['event_types'] = Array.from(eventTypes);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/attempt',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List attempts by message id  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
         * @summary List Attempts By Msg
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} msgId The msg\&#39;s ID or UID
         * @param {number} [limit] Limit the number of returned items
         * @param {string} [iterator] The iterator returned from a prior invocation
         * @param {MessageStatus} [status] Filter response based on the delivery status
         * @param {StatusCodeClass} [statusCodeClass] Filter response based on the HTTP status code
         * @param {string} [channel] Filter response based on the channel
         * @param {string} [tag] Filter response based on the tag
         * @param {string} [endpointId] Filter the attempts based on the attempted endpoint
         * @param {string} [before] Only include items created before a certain date
         * @param {string} [after] Only include items created after a certain date
         * @param {boolean} [withContent] When &#x60;true&#x60; attempt content is included in the response
         * @param {Set<string>} [eventTypes] Filter response based on the event type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByMsg: async (appId: string, msgId: string, limit?: number, iterator?: string, status?: MessageStatus, statusCodeClass?: StatusCodeClass, channel?: string, tag?: string, endpointId?: string, before?: string, after?: string, withContent?: boolean, eventTypes?: Set<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('listByMsg', 'appId', appId)
            // verify required parameter 'msgId' is not null or undefined
            assertParamExists('listByMsg', 'msgId', msgId)
            const localVarPath = `/api/v1/app/{app_id}/attempt/msg/{msg_id}`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"msg_id"}}`, encodeURIComponent(String(msgId !== undefined ? msgId : `-msg_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (iterator !== undefined) {
                localVarQueryParameter['iterator'] = iterator;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (statusCodeClass !== undefined) {
                localVarQueryParameter['status_code_class'] = statusCodeClass;
            }

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (endpointId !== undefined) {
                localVarQueryParameter['endpoint_id'] = endpointId;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = (before as any instanceof Date) ?
                    (before as any).toISOString() :
                    before;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = (after as any instanceof Date) ?
                    (after as any).toISOString() :
                    after;
            }

            if (withContent !== undefined) {
                localVarQueryParameter['with_content'] = withContent;
            }

            if (eventTypes) {
                localVarQueryParameter['event_types'] = Array.from(eventTypes);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/attempt/msg/{msg_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deprecated: Please use \"List Attempts by Endpoint\" and \"List Attempts by Msg\" instead.  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate.  `msg_id`: Use a message id or a message `eventId`
         * @summary List Attempts
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} msgId The msg\&#39;s ID or UID
         * @param {number} [limit] Limit the number of returned items
         * @param {string} [iterator] The iterator returned from a prior invocation
         * @param {string} [endpointId] Filter the attempts based on the attempted endpoint
         * @param {string} [channel] Filter response based on the channel
         * @param {string} [tag] Filter response based on the tag
         * @param {MessageStatus} [status] Filter response based on the delivery status
         * @param {string} [before] Only include items created before a certain date
         * @param {string} [after] Only include items created after a certain date
         * @param {StatusCodeClass} [statusCodeClass] Filter response based on the HTTP status code
         * @param {Set<string>} [eventTypes] Filter response based on the event type
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listByMsgAttempt: async (appId: string, msgId: string, limit?: number, iterator?: string, endpointId?: string, channel?: string, tag?: string, status?: MessageStatus, before?: string, after?: string, statusCodeClass?: StatusCodeClass, eventTypes?: Set<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('listByMsgAttempt', 'appId', appId)
            // verify required parameter 'msgId' is not null or undefined
            assertParamExists('listByMsgAttempt', 'msgId', msgId)
            const localVarPath = `/api/v1/app/{app_id}/msg/{msg_id}/attempt`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"msg_id"}}`, encodeURIComponent(String(msgId !== undefined ? msgId : `-msg_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (iterator !== undefined) {
                localVarQueryParameter['iterator'] = iterator;
            }

            if (endpointId !== undefined) {
                localVarQueryParameter['endpoint_id'] = endpointId;
            }

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = (before as any instanceof Date) ?
                    (before as any).toISOString() :
                    before;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = (after as any instanceof Date) ?
                    (after as any).toISOString() :
                    after;
            }

            if (statusCodeClass !== undefined) {
                localVarQueryParameter['status_code_class'] = statusCodeClass;
            }

            if (eventTypes) {
                localVarQueryParameter['event_types'] = Array.from(eventTypes);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/msg/{msg_id}/attempt',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resend a message to the specified endpoint.
         * @summary Resend Webhook
         * @param {string} appId The app\&#39;s ID or UID
         * @param {string} msgId The msg\&#39;s ID or UID
         * @param {string} endpointId The ep\&#39;s ID or UID
         * @param {string} [idempotencyKey] The request\&#39;s idempotency key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendWebhook: async (appId: string, msgId: string, endpointId: string, idempotencyKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('resendWebhook', 'appId', appId)
            // verify required parameter 'msgId' is not null or undefined
            assertParamExists('resendWebhook', 'msgId', msgId)
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('resendWebhook', 'endpointId', endpointId)
            const localVarPath = `/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/resend`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)))
                .replace(`{${"msg_id"}}`, encodeURIComponent(String(msgId !== undefined ? msgId : `-msg_id-`)))
                .replace(`{${"endpoint_id"}}`, encodeURIComponent(String(endpointId !== undefined ? endpointId : `-endpoint_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (idempotencyKey != null) {
                localVarHeaderParameter['idempotency-key'] = String(idempotencyKey);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/resend',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageAttemptApi - functional programming interface
 * @export
 */
export const MessageAttemptApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageAttemptApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes the given attempt\'s response body. Useful when an endpoint accidentally returned sensitive content.
         * @summary Delete attempt response body
         * @param {MessageAttemptApiDeleteResponseBodyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteResponseBody(requestParameters: MessageAttemptApiDeleteResponseBodyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResponseBody(requestParameters.appId, requestParameters.msgId, requestParameters.attemptId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * `msg_id`: Use a message id or a message `eventId`
         * @summary Get Attempt
         * @param {MessageAttemptApiGetByAttemptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByAttempt(requestParameters: MessageAttemptApiGetByAttemptRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageAttemptOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByAttempt(requestParameters.appId, requestParameters.msgId, requestParameters.attemptId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List endpoints attempted by a given message. Additionally includes metadata about the latest message attempt. By default, endpoints are listed in ascending order by ID.
         * @summary List Attempted Destinations
         * @param {MessageAttemptApiListAttemptedDestinationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAttemptedDestinations(requestParameters: MessageAttemptApiListAttemptedDestinationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseMessageEndpointOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAttemptedDestinations(requestParameters.appId, requestParameters.msgId, requestParameters.limit, requestParameters.iterator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
         * @summary List Attempted Messages
         * @param {MessageAttemptApiListAttemptedMessagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAttemptedMessages(requestParameters: MessageAttemptApiListAttemptedMessagesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseEndpointMessageOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAttemptedMessages(requestParameters.appId, requestParameters.endpointId, requestParameters.limit, requestParameters.iterator, requestParameters.channel, requestParameters.tag, requestParameters.status, requestParameters.before, requestParameters.after, requestParameters.withContent, requestParameters.eventTypes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List attempts by endpoint id  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
         * @summary List Attempts By Endpoint
         * @param {MessageAttemptApiListByEndpointRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByEndpoint(requestParameters: MessageAttemptApiListByEndpointRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseMessageAttemptOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByEndpoint(requestParameters.appId, requestParameters.endpointId, requestParameters.limit, requestParameters.iterator, requestParameters.status, requestParameters.statusCodeClass, requestParameters.channel, requestParameters.tag, requestParameters.before, requestParameters.after, requestParameters.withContent, requestParameters.withMsg, requestParameters.eventTypes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.  List the message attempts for a particular endpoint.  Returning the endpoint.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
         * @summary List Attempts For Endpoint
         * @param {MessageAttemptApiListByEndpointDeprecatedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async listByEndpointDeprecated(requestParameters: MessageAttemptApiListByEndpointDeprecatedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseMessageAttemptEndpointOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByEndpointDeprecated(requestParameters.appId, requestParameters.msgId, requestParameters.endpointId, requestParameters.limit, requestParameters.iterator, requestParameters.channel, requestParameters.tag, requestParameters.status, requestParameters.before, requestParameters.after, requestParameters.eventTypes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List attempts by message id  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
         * @summary List Attempts By Msg
         * @param {MessageAttemptApiListByMsgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByMsg(requestParameters: MessageAttemptApiListByMsgRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseMessageAttemptOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByMsg(requestParameters.appId, requestParameters.msgId, requestParameters.limit, requestParameters.iterator, requestParameters.status, requestParameters.statusCodeClass, requestParameters.channel, requestParameters.tag, requestParameters.endpointId, requestParameters.before, requestParameters.after, requestParameters.withContent, requestParameters.eventTypes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deprecated: Please use \"List Attempts by Endpoint\" and \"List Attempts by Msg\" instead.  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate.  `msg_id`: Use a message id or a message `eventId`
         * @summary List Attempts
         * @param {MessageAttemptApiListByMsgAttemptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async listByMsgAttempt(requestParameters: MessageAttemptApiListByMsgAttemptRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListResponseMessageAttemptOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByMsgAttempt(requestParameters.appId, requestParameters.msgId, requestParameters.limit, requestParameters.iterator, requestParameters.endpointId, requestParameters.channel, requestParameters.tag, requestParameters.status, requestParameters.before, requestParameters.after, requestParameters.statusCodeClass, requestParameters.eventTypes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Resend a message to the specified endpoint.
         * @summary Resend Webhook
         * @param {MessageAttemptApiResendWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resendWebhook(requestParameters: MessageAttemptApiResendWebhookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resendWebhook(requestParameters.appId, requestParameters.msgId, requestParameters.endpointId, requestParameters.idempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessageAttemptApi - factory interface
 * @export
 */
export const MessageAttemptApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageAttemptApiFp(configuration)
    return {
        /**
         * Deletes the given attempt\'s response body. Useful when an endpoint accidentally returned sensitive content.
         * @summary Delete attempt response body
         * @param {MessageAttemptApiDeleteResponseBodyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResponseBody(requestParameters: MessageAttemptApiDeleteResponseBodyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteResponseBody(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * `msg_id`: Use a message id or a message `eventId`
         * @summary Get Attempt
         * @param {MessageAttemptApiGetByAttemptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByAttempt(requestParameters: MessageAttemptApiGetByAttemptRequest, options?: AxiosRequestConfig): AxiosPromise<MessageAttemptOut> {
            return localVarFp.getByAttempt(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List endpoints attempted by a given message. Additionally includes metadata about the latest message attempt. By default, endpoints are listed in ascending order by ID.
         * @summary List Attempted Destinations
         * @param {MessageAttemptApiListAttemptedDestinationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAttemptedDestinations(requestParameters: MessageAttemptApiListAttemptedDestinationsRequest, options?: AxiosRequestConfig): AxiosPromise<ListResponseMessageEndpointOut> {
            return localVarFp.listAttemptedDestinations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
         * @summary List Attempted Messages
         * @param {MessageAttemptApiListAttemptedMessagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAttemptedMessages(requestParameters: MessageAttemptApiListAttemptedMessagesRequest, options?: AxiosRequestConfig): AxiosPromise<ListResponseEndpointMessageOut> {
            return localVarFp.listAttemptedMessages(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List attempts by endpoint id  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
         * @summary List Attempts By Endpoint
         * @param {MessageAttemptApiListByEndpointRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByEndpoint(requestParameters: MessageAttemptApiListByEndpointRequest, options?: AxiosRequestConfig): AxiosPromise<ListResponseMessageAttemptOut> {
            return localVarFp.listByEndpoint(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.  List the message attempts for a particular endpoint.  Returning the endpoint.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
         * @summary List Attempts For Endpoint
         * @param {MessageAttemptApiListByEndpointDeprecatedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listByEndpointDeprecated(requestParameters: MessageAttemptApiListByEndpointDeprecatedRequest, options?: AxiosRequestConfig): AxiosPromise<ListResponseMessageAttemptEndpointOut> {
            return localVarFp.listByEndpointDeprecated(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List attempts by message id  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
         * @summary List Attempts By Msg
         * @param {MessageAttemptApiListByMsgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByMsg(requestParameters: MessageAttemptApiListByMsgRequest, options?: AxiosRequestConfig): AxiosPromise<ListResponseMessageAttemptOut> {
            return localVarFp.listByMsg(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deprecated: Please use \"List Attempts by Endpoint\" and \"List Attempts by Msg\" instead.  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate.  `msg_id`: Use a message id or a message `eventId`
         * @summary List Attempts
         * @param {MessageAttemptApiListByMsgAttemptRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listByMsgAttempt(requestParameters: MessageAttemptApiListByMsgAttemptRequest, options?: AxiosRequestConfig): AxiosPromise<ListResponseMessageAttemptOut> {
            return localVarFp.listByMsgAttempt(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Resend a message to the specified endpoint.
         * @summary Resend Webhook
         * @param {MessageAttemptApiResendWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendWebhook(requestParameters: MessageAttemptApiResendWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.resendWebhook(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteResponseBody operation in MessageAttemptApi.
 * @export
 * @interface MessageAttemptApiDeleteResponseBodyRequest
 */
export type MessageAttemptApiDeleteResponseBodyRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof MessageAttemptApiDeleteResponseBody
    */
    readonly appId: string
    
    /**
    * The msg\'s ID or UID
    * @type {string}
    * @memberof MessageAttemptApiDeleteResponseBody
    */
    readonly msgId: string
    
    /**
    * The attempt\'s ID
    * @type {string}
    * @memberof MessageAttemptApiDeleteResponseBody
    */
    readonly attemptId: string
    
}

/**
 * Request parameters for getByAttempt operation in MessageAttemptApi.
 * @export
 * @interface MessageAttemptApiGetByAttemptRequest
 */
export type MessageAttemptApiGetByAttemptRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof MessageAttemptApiGetByAttempt
    */
    readonly appId: string
    
    /**
    * The msg\'s ID or UID
    * @type {string}
    * @memberof MessageAttemptApiGetByAttempt
    */
    readonly msgId: string
    
    /**
    * The attempt\'s ID
    * @type {string}
    * @memberof MessageAttemptApiGetByAttempt
    */
    readonly attemptId: string
    
}

/**
 * Request parameters for listAttemptedDestinations operation in MessageAttemptApi.
 * @export
 * @interface MessageAttemptApiListAttemptedDestinationsRequest
 */
export type MessageAttemptApiListAttemptedDestinationsRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof MessageAttemptApiListAttemptedDestinations
    */
    readonly appId: string
    
    /**
    * The msg\'s ID or UID
    * @type {string}
    * @memberof MessageAttemptApiListAttemptedDestinations
    */
    readonly msgId: string
    
    /**
    * Limit the number of returned items
    * @type {number}
    * @memberof MessageAttemptApiListAttemptedDestinations
    */
    readonly limit?: number
    
    /**
    * The iterator returned from a prior invocation
    * @type {string}
    * @memberof MessageAttemptApiListAttemptedDestinations
    */
    readonly iterator?: string
    
}

/**
 * Request parameters for listAttemptedMessages operation in MessageAttemptApi.
 * @export
 * @interface MessageAttemptApiListAttemptedMessagesRequest
 */
export type MessageAttemptApiListAttemptedMessagesRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof MessageAttemptApiListAttemptedMessages
    */
    readonly appId: string
    
    /**
    * The ep\'s ID or UID
    * @type {string}
    * @memberof MessageAttemptApiListAttemptedMessages
    */
    readonly endpointId: string
    
    /**
    * Limit the number of returned items
    * @type {number}
    * @memberof MessageAttemptApiListAttemptedMessages
    */
    readonly limit?: number
    
    /**
    * The iterator returned from a prior invocation
    * @type {string}
    * @memberof MessageAttemptApiListAttemptedMessages
    */
    readonly iterator?: string
    
    /**
    * Filter response based on the channel
    * @type {string}
    * @memberof MessageAttemptApiListAttemptedMessages
    */
    readonly channel?: string
    
    /**
    * Filter response based on the message tags
    * @type {string}
    * @memberof MessageAttemptApiListAttemptedMessages
    */
    readonly tag?: string
    
    /**
    * Filter response based on the delivery status
    * @type {MessageStatus}
    * @memberof MessageAttemptApiListAttemptedMessages
    */
    readonly status?: MessageStatus
    
    /**
    * Only include items created before a certain date
    * @type {string}
    * @memberof MessageAttemptApiListAttemptedMessages
    */
    readonly before?: string
    
    /**
    * Only include items created after a certain date
    * @type {string}
    * @memberof MessageAttemptApiListAttemptedMessages
    */
    readonly after?: string
    
    /**
    * When `true` message payloads are included in the response
    * @type {boolean}
    * @memberof MessageAttemptApiListAttemptedMessages
    */
    readonly withContent?: boolean
    
    /**
    * Filter response based on the event type
    * @type {Set<string>}
    * @memberof MessageAttemptApiListAttemptedMessages
    */
    readonly eventTypes?: Set<string>
    
}

/**
 * Request parameters for listByEndpoint operation in MessageAttemptApi.
 * @export
 * @interface MessageAttemptApiListByEndpointRequest
 */
export type MessageAttemptApiListByEndpointRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof MessageAttemptApiListByEndpoint
    */
    readonly appId: string
    
    /**
    * The ep\'s ID or UID
    * @type {string}
    * @memberof MessageAttemptApiListByEndpoint
    */
    readonly endpointId: string
    
    /**
    * Limit the number of returned items
    * @type {number}
    * @memberof MessageAttemptApiListByEndpoint
    */
    readonly limit?: number
    
    /**
    * The iterator returned from a prior invocation
    * @type {string}
    * @memberof MessageAttemptApiListByEndpoint
    */
    readonly iterator?: string
    
    /**
    * Filter response based on the delivery status
    * @type {MessageStatus}
    * @memberof MessageAttemptApiListByEndpoint
    */
    readonly status?: MessageStatus
    
    /**
    * Filter response based on the HTTP status code
    * @type {StatusCodeClass}
    * @memberof MessageAttemptApiListByEndpoint
    */
    readonly statusCodeClass?: StatusCodeClass
    
    /**
    * Filter response based on the channel
    * @type {string}
    * @memberof MessageAttemptApiListByEndpoint
    */
    readonly channel?: string
    
    /**
    * Filter response based on the tag
    * @type {string}
    * @memberof MessageAttemptApiListByEndpoint
    */
    readonly tag?: string
    
    /**
    * Only include items created before a certain date
    * @type {string}
    * @memberof MessageAttemptApiListByEndpoint
    */
    readonly before?: string
    
    /**
    * Only include items created after a certain date
    * @type {string}
    * @memberof MessageAttemptApiListByEndpoint
    */
    readonly after?: string
    
    /**
    * When `true` attempt content is included in the response
    * @type {boolean}
    * @memberof MessageAttemptApiListByEndpoint
    */
    readonly withContent?: boolean
    
    /**
    * When `true`, the message information is included in the response
    * @type {boolean}
    * @memberof MessageAttemptApiListByEndpoint
    */
    readonly withMsg?: boolean
    
    /**
    * Filter response based on the event type
    * @type {Set<string>}
    * @memberof MessageAttemptApiListByEndpoint
    */
    readonly eventTypes?: Set<string>
    
}

/**
 * Request parameters for listByEndpointDeprecated operation in MessageAttemptApi.
 * @export
 * @interface MessageAttemptApiListByEndpointDeprecatedRequest
 */
export type MessageAttemptApiListByEndpointDeprecatedRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof MessageAttemptApiListByEndpointDeprecated
    */
    readonly appId: string
    
    /**
    * The msg\'s ID or UID
    * @type {string}
    * @memberof MessageAttemptApiListByEndpointDeprecated
    */
    readonly msgId: string
    
    /**
    * The ep\'s ID or UID
    * @type {string}
    * @memberof MessageAttemptApiListByEndpointDeprecated
    */
    readonly endpointId: string
    
    /**
    * Limit the number of returned items
    * @type {number}
    * @memberof MessageAttemptApiListByEndpointDeprecated
    */
    readonly limit?: number
    
    /**
    * The iterator returned from a prior invocation
    * @type {string}
    * @memberof MessageAttemptApiListByEndpointDeprecated
    */
    readonly iterator?: string
    
    /**
    * Filter response based on the channel
    * @type {string}
    * @memberof MessageAttemptApiListByEndpointDeprecated
    */
    readonly channel?: string
    
    /**
    * Filter response based on the tag
    * @type {string}
    * @memberof MessageAttemptApiListByEndpointDeprecated
    */
    readonly tag?: string
    
    /**
    * Filter response based on the delivery status
    * @type {MessageStatus}
    * @memberof MessageAttemptApiListByEndpointDeprecated
    */
    readonly status?: MessageStatus
    
    /**
    * Only include items created before a certain date
    * @type {string}
    * @memberof MessageAttemptApiListByEndpointDeprecated
    */
    readonly before?: string
    
    /**
    * Only include items created after a certain date
    * @type {string}
    * @memberof MessageAttemptApiListByEndpointDeprecated
    */
    readonly after?: string
    
    /**
    * Filter response based on the event type
    * @type {Set<string>}
    * @memberof MessageAttemptApiListByEndpointDeprecated
    */
    readonly eventTypes?: Set<string>
    
}

/**
 * Request parameters for listByMsg operation in MessageAttemptApi.
 * @export
 * @interface MessageAttemptApiListByMsgRequest
 */
export type MessageAttemptApiListByMsgRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof MessageAttemptApiListByMsg
    */
    readonly appId: string
    
    /**
    * The msg\'s ID or UID
    * @type {string}
    * @memberof MessageAttemptApiListByMsg
    */
    readonly msgId: string
    
    /**
    * Limit the number of returned items
    * @type {number}
    * @memberof MessageAttemptApiListByMsg
    */
    readonly limit?: number
    
    /**
    * The iterator returned from a prior invocation
    * @type {string}
    * @memberof MessageAttemptApiListByMsg
    */
    readonly iterator?: string
    
    /**
    * Filter response based on the delivery status
    * @type {MessageStatus}
    * @memberof MessageAttemptApiListByMsg
    */
    readonly status?: MessageStatus
    
    /**
    * Filter response based on the HTTP status code
    * @type {StatusCodeClass}
    * @memberof MessageAttemptApiListByMsg
    */
    readonly statusCodeClass?: StatusCodeClass
    
    /**
    * Filter response based on the channel
    * @type {string}
    * @memberof MessageAttemptApiListByMsg
    */
    readonly channel?: string
    
    /**
    * Filter response based on the tag
    * @type {string}
    * @memberof MessageAttemptApiListByMsg
    */
    readonly tag?: string
    
    /**
    * Filter the attempts based on the attempted endpoint
    * @type {string}
    * @memberof MessageAttemptApiListByMsg
    */
    readonly endpointId?: string
    
    /**
    * Only include items created before a certain date
    * @type {string}
    * @memberof MessageAttemptApiListByMsg
    */
    readonly before?: string
    
    /**
    * Only include items created after a certain date
    * @type {string}
    * @memberof MessageAttemptApiListByMsg
    */
    readonly after?: string
    
    /**
    * When `true` attempt content is included in the response
    * @type {boolean}
    * @memberof MessageAttemptApiListByMsg
    */
    readonly withContent?: boolean
    
    /**
    * Filter response based on the event type
    * @type {Set<string>}
    * @memberof MessageAttemptApiListByMsg
    */
    readonly eventTypes?: Set<string>
    
}

/**
 * Request parameters for listByMsgAttempt operation in MessageAttemptApi.
 * @export
 * @interface MessageAttemptApiListByMsgAttemptRequest
 */
export type MessageAttemptApiListByMsgAttemptRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof MessageAttemptApiListByMsgAttempt
    */
    readonly appId: string
    
    /**
    * The msg\'s ID or UID
    * @type {string}
    * @memberof MessageAttemptApiListByMsgAttempt
    */
    readonly msgId: string
    
    /**
    * Limit the number of returned items
    * @type {number}
    * @memberof MessageAttemptApiListByMsgAttempt
    */
    readonly limit?: number
    
    /**
    * The iterator returned from a prior invocation
    * @type {string}
    * @memberof MessageAttemptApiListByMsgAttempt
    */
    readonly iterator?: string
    
    /**
    * Filter the attempts based on the attempted endpoint
    * @type {string}
    * @memberof MessageAttemptApiListByMsgAttempt
    */
    readonly endpointId?: string
    
    /**
    * Filter response based on the channel
    * @type {string}
    * @memberof MessageAttemptApiListByMsgAttempt
    */
    readonly channel?: string
    
    /**
    * Filter response based on the tag
    * @type {string}
    * @memberof MessageAttemptApiListByMsgAttempt
    */
    readonly tag?: string
    
    /**
    * Filter response based on the delivery status
    * @type {MessageStatus}
    * @memberof MessageAttemptApiListByMsgAttempt
    */
    readonly status?: MessageStatus
    
    /**
    * Only include items created before a certain date
    * @type {string}
    * @memberof MessageAttemptApiListByMsgAttempt
    */
    readonly before?: string
    
    /**
    * Only include items created after a certain date
    * @type {string}
    * @memberof MessageAttemptApiListByMsgAttempt
    */
    readonly after?: string
    
    /**
    * Filter response based on the HTTP status code
    * @type {StatusCodeClass}
    * @memberof MessageAttemptApiListByMsgAttempt
    */
    readonly statusCodeClass?: StatusCodeClass
    
    /**
    * Filter response based on the event type
    * @type {Set<string>}
    * @memberof MessageAttemptApiListByMsgAttempt
    */
    readonly eventTypes?: Set<string>
    
}

/**
 * Request parameters for resendWebhook operation in MessageAttemptApi.
 * @export
 * @interface MessageAttemptApiResendWebhookRequest
 */
export type MessageAttemptApiResendWebhookRequest = {
    
    /**
    * The app\'s ID or UID
    * @type {string}
    * @memberof MessageAttemptApiResendWebhook
    */
    readonly appId: string
    
    /**
    * The msg\'s ID or UID
    * @type {string}
    * @memberof MessageAttemptApiResendWebhook
    */
    readonly msgId: string
    
    /**
    * The ep\'s ID or UID
    * @type {string}
    * @memberof MessageAttemptApiResendWebhook
    */
    readonly endpointId: string
    
    /**
    * The request\'s idempotency key
    * @type {string}
    * @memberof MessageAttemptApiResendWebhook
    */
    readonly idempotencyKey?: string
    
}

/**
 * MessageAttemptApiGenerated - object-oriented interface
 * @export
 * @class MessageAttemptApiGenerated
 * @extends {BaseAPI}
 */
export class MessageAttemptApiGenerated extends BaseAPI {
    /**
     * Deletes the given attempt\'s response body. Useful when an endpoint accidentally returned sensitive content.
     * @summary Delete attempt response body
     * @param {MessageAttemptApiDeleteResponseBodyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageAttemptApiGenerated
     */
    public deleteResponseBody(requestParameters: MessageAttemptApiDeleteResponseBodyRequest, options?: AxiosRequestConfig) {
        return MessageAttemptApiFp(this.configuration).deleteResponseBody(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * `msg_id`: Use a message id or a message `eventId`
     * @summary Get Attempt
     * @param {MessageAttemptApiGetByAttemptRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageAttemptApiGenerated
     */
    public getByAttempt(requestParameters: MessageAttemptApiGetByAttemptRequest, options?: AxiosRequestConfig) {
        return MessageAttemptApiFp(this.configuration).getByAttempt(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List endpoints attempted by a given message. Additionally includes metadata about the latest message attempt. By default, endpoints are listed in ascending order by ID.
     * @summary List Attempted Destinations
     * @param {MessageAttemptApiListAttemptedDestinationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageAttemptApiGenerated
     */
    public listAttemptedDestinations(requestParameters: MessageAttemptApiListAttemptedDestinationsRequest, options?: AxiosRequestConfig) {
        return MessageAttemptApiFp(this.configuration).listAttemptedDestinations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
     * @summary List Attempted Messages
     * @param {MessageAttemptApiListAttemptedMessagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageAttemptApiGenerated
     */
    public listAttemptedMessages(requestParameters: MessageAttemptApiListAttemptedMessagesRequest, options?: AxiosRequestConfig) {
        return MessageAttemptApiFp(this.configuration).listAttemptedMessages(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List attempts by endpoint id  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
     * @summary List Attempts By Endpoint
     * @param {MessageAttemptApiListByEndpointRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageAttemptApiGenerated
     */
    public listByEndpoint(requestParameters: MessageAttemptApiListByEndpointRequest, options?: AxiosRequestConfig) {
        return MessageAttemptApiFp(this.configuration).listByEndpoint(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.  List the message attempts for a particular endpoint.  Returning the endpoint.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
     * @summary List Attempts For Endpoint
     * @param {MessageAttemptApiListByEndpointDeprecatedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof MessageAttemptApiGenerated
     */
    public listByEndpointDeprecated(requestParameters: MessageAttemptApiListByEndpointDeprecatedRequest, options?: AxiosRequestConfig) {
        return MessageAttemptApiFp(this.configuration).listByEndpointDeprecated(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List attempts by message id  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. 
     * @summary List Attempts By Msg
     * @param {MessageAttemptApiListByMsgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageAttemptApiGenerated
     */
    public listByMsg(requestParameters: MessageAttemptApiListByMsgRequest, options?: AxiosRequestConfig) {
        return MessageAttemptApiFp(this.configuration).listByMsg(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deprecated: Please use \"List Attempts by Endpoint\" and \"List Attempts by Msg\" instead.  Note that by default this endpoint is limited to retrieving 90 days\' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate.  `msg_id`: Use a message id or a message `eventId`
     * @summary List Attempts
     * @param {MessageAttemptApiListByMsgAttemptRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof MessageAttemptApiGenerated
     */
    public listByMsgAttempt(requestParameters: MessageAttemptApiListByMsgAttemptRequest, options?: AxiosRequestConfig) {
        return MessageAttemptApiFp(this.configuration).listByMsgAttempt(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resend a message to the specified endpoint.
     * @summary Resend Webhook
     * @param {MessageAttemptApiResendWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageAttemptApiGenerated
     */
    public resendWebhook(requestParameters: MessageAttemptApiResendWebhookRequest, options?: AxiosRequestConfig) {
        return MessageAttemptApiFp(this.configuration).resendWebhook(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
